#!/usr/bin/env python3
"""Create the unified single-cell notebook"""

import json

notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# üé® SD-DarkMaster-Pro Unified Interface\n",
                "\n",
                "This is a single-cell notebook that launches a comprehensive Streamlit interface for managing all SD WebUI operations.\n",
                "\n",
                "**Features:**\n",
                "- ‚úÖ One-click setup and configuration\n",
                "- üì¶ Model browsing and selection (SD1.5, SDXL, CivitAI)\n",
                "- üíæ Download management with progress tracking\n",
                "- üöÄ WebUI launcher with multiple options\n",
                "- üßπ Storage management and cleanup\n",
                "- üìä Real-time monitoring and logs\n",
                "\n",
                "Simply run the cell below to access the complete interface!"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {
                "cellView": "form",
                "id": "unified_interface"
            },
            "outputs": [],
            "source": [
                "#@title üöÄ Launch SD-DarkMaster-Pro Unified Interface\n",
                "#@markdown This single cell handles everything - setup, downloads, and WebUI launch!\n",
                "\n",
                "import os\n",
                "import sys\n",
                "import subprocess\n",
                "import time\n",
                "from pathlib import Path\n",
                "\n",
                "# Configuration\n",
                "ngrok_token = \"2tjxIXifSaGR3dMhkvhk6sZqbGo_6ZfBZLZHMbtAjfRmfoDW5\" #@param {type:\"string\"}\n",
                "auto_launch = True #@param {type:\"boolean\"}\n",
                "\n",
                "print(\"üé® SD-DarkMaster-Pro Unified Interface\")\n",
                "print(\"=\" * 50)\n",
                "\n",
                "# Detect platform\n",
                "if os.path.exists('/content'):\n",
                "    platform = 'colab'\n",
                "    base_path = Path('/content')\n",
                "elif os.path.exists('/kaggle'):\n",
                "    platform = 'kaggle'\n",
                "    base_path = Path('/kaggle/working')\n",
                "else:\n",
                "    platform = 'local'\n",
                "    base_path = Path.home()\n",
                "\n",
                "print(f\"üñ•Ô∏è  Platform: {platform}\")\n",
                "project_path = base_path / 'SD-DarkMaster-Pro'\n",
                "\n",
                "# Clone repository if needed\n",
                "if not project_path.exists():\n",
                "    print(\"\\nüì• Cloning repository...\")\n",
                "    !git clone https://github.com/remphanostar/SD-DarkMaster-Pro.git {project_path}\n",
                "else:\n",
                "    print(\"\\nüìÇ Repository already exists\")\n",
                "    os.chdir(project_path)\n",
                "    !git pull\n",
                "\n",
                "# Install requirements\n",
                "print(\"\\nüì¶ Installing requirements...\")\n",
                "requirements = ['streamlit', 'pyngrok', 'psutil', 'requests', 'beautifulsoup4']\n",
                "for req in requirements:\n",
                "    subprocess.run([sys.executable, '-m', 'pip', 'install', '-q', req])\n",
                "\n",
                "# Set ngrok token\n",
                "if ngrok_token:\n",
                "    os.environ['NGROK_AUTH_TOKEN'] = ngrok_token\n",
                "\n",
                "# Launch Streamlit app\n",
                "print(\"\\nüöÄ Launching unified interface...\")\n",
                "print(\"-\" * 50)\n",
                "\n",
                "# Kill any existing Streamlit processes\n",
                "subprocess.run(['pkill', '-f', 'streamlit'], capture_output=True)\n",
                "time.sleep(2)\n",
                "\n",
                "# Start Streamlit in background\n",
                "app_path = project_path / 'scripts' / 'unified_app.py'\n",
                "process = subprocess.Popen([\n",
                "    sys.executable, '-m', 'streamlit', 'run',\n",
                "    str(app_path),\n",
                "    '--server.port', '8501',\n",
                "    '--server.headless', 'true',\n",
                "    '--logger.level', 'error'\n",
                "], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n",
                "\n",
                "# Wait for server to start\n",
                "print(\"‚è≥ Starting Streamlit server...\")\n",
                "time.sleep(5)\n",
                "\n",
                "# Create ngrok tunnel\n",
                "try:\n",
                "    from pyngrok import ngrok\n",
                "    \n",
                "    # Close any existing tunnels\n",
                "    for tunnel in ngrok.get_tunnels():\n",
                "        ngrok.disconnect(tunnel.public_url)\n",
                "    \n",
                "    # Create new tunnel\n",
                "    public_url = ngrok.connect(8501)\n",
                "    print(f\"\\n‚úÖ Interface is ready!\")\n",
                "    print(f\"\\nüåê Access your dashboard at: {public_url}\")\n",
                "    print(f\"\\nüì± Share this link to access from any device\")\n",
                "    print(\"-\" * 50)\n",
                "    \n",
                "    # Display instructions\n",
                "    print(\"\\nüìñ Quick Start Guide:\")\n",
                "    print(\"1. Click the link above to open the interface\")\n",
                "    print(\"2. Navigate to 'Setup' to configure your environment\")\n",
                "    print(\"3. Go to 'Models' to select what to download\")\n",
                "    print(\"4. Use 'Downloads' to manage your download queue\")\n",
                "    print(\"5. Launch your preferred WebUI from 'Launch'\")\n",
                "    print(\"6. Monitor everything from the 'Home' dashboard\")\n",
                "    \n",
                "except Exception as e:\n",
                "    print(f\"\\n‚ö†Ô∏è  Ngrok error: {e}\")\n",
                "    print(\"\\nüí° You can still access locally at: http://localhost:8501\")\n",
                "\n",
                "# Keep the cell running\n",
                "print(\"\\n‚ú® Interface is running. This cell will stay active.\")\n",
                "print(\"‚ö†Ô∏è  Don't close this cell or the interface will stop!\")\n",
                "\n",
                "# Optional: Auto-open the URL\n",
                "if auto_launch and 'public_url' in locals():\n",
                "    try:\n",
                "        from IPython.display import Javascript\n",
                "        display(Javascript(f'window.open(\\\"{public_url}\\\", \\\"_blank\\\");'))\n",
                "    except:\n",
                "        pass\n",
                "\n",
                "# Keep process alive\n",
                "try:\n",
                "    while True:\n",
                "        time.sleep(1)\n",
                "        if process.poll() is not None:\n",
                "            print(\"\\n‚ùå Streamlit process ended unexpectedly\")\n",
                "            break\n",
                "except KeyboardInterrupt:\n",
                "    print(\"\\nüëã Shutting down...\")\n",
                "    process.terminate()"
            ]
        }
    ],
    "metadata": {
        "colab": {
            "provenance": [],
            "gpuType": "T4"
        },
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "name": "python",
            "version": "3.10.0"
        },
        "accelerator": "GPU"
    },
    "nbformat": 4,
    "nbformat_minor": 0
}

# Write notebook
with open('/workspace/notebook/SD-DarkMaster-Pro-Unified.ipynb', 'w') as f:
    json.dump(notebook, f, indent=2)

print("‚úÖ Created SD-DarkMaster-Pro-Unified.ipynb")