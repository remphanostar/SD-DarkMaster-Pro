{
  "1.22.0": {
    "streamlit.altair_chart": {
      "name": "altair_chart",
      "signature": "st.altair_chart(altair_chart, use_container_width=False, theme=\"streamlit\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\nchart_data = pd.DataFrame(\n    np.random.randn(20, 3),\n    columns=['a', 'b', 'c'])\n\nc = alt.Chart(chart_data).mark_circle().encode(\n    x='a', y='b', size='c', color='c', tooltip=['a', 'b', 'c'])\n\nst.altair_chart(c, use_container_width=True)\n</pre>\n<p>Examples of Altair charts can be found at\n<a class=\"reference external\" href=\"https://altair-viz.github.io/gallery/\">https://altair-viz.github.io/gallery/</a>.</p>\n\n                <Cloud name=\"doc-vega-lite-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 300px\" />\n            </blockquote>\n",
      "description": "<p>Display a chart using the Altair library.</p>\n",
      "args": [
        {
          "name": "altair_chart",
          "type_name": "altair.vegalite.v2.api.Chart",
          "is_optional": false,
          "description": "<p>The Altair chart object to display.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over Altair's native <cite>width</cite> value.</p>\n",
          "default": null
        },
        {
          "name": "theme",
          "type_name": "\"streamlit\" or None",
          "is_optional": false,
          "description": "<p>The theme of the chart. Currently, we only support &quot;streamlit&quot; for the Streamlit\ndefined design or None to fallback to the default behavior of the library.</p>\n",
          "default": "behavior"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L422"
    },
    "streamlit.area_chart": {
      "name": "area_chart",
      "signature": "st.area_chart(data=None, *, x=None, y=None, width=0, height=0, use_container_width=True)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nchart_data = pd.DataFrame(\n    np.random.randn(20, 3),\n    columns=['a', 'b', 'c'])\n\nst.area_chart(chart_data)\n</pre>\n\n                <Cloud name=\"doc-area-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 400px\" />\n            </blockquote>\n",
      "description": "<p>Display an area chart.</p>\n<p>This is just syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many &quot;just plot\nthis&quot; scenarios, while being less customizable.</p>\n<p>If st.area_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, or dict",
          "is_optional": false,
          "description": "<p>Data to be plotted.\nPyarrow tables are not supported by Streamlit's legacy DataFrame serialization\n(i.e. with <cite>config.dataFrameSerialization = &quot;legacy&quot;</cite>).\nTo use pyarrow tables, please enable pyarrow by changing the config setting,\n<cite>config.dataFrameSerialization = &quot;arrow&quot;</cite>.</p>\n",
          "default": null
        },
        {
          "name": "x",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>Column name to use for the x-axis. If None, uses the data index for the x-axis.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "y",
          "type_name": "str, sequence of str, or None",
          "is_optional": false,
          "description": "<p>Column name(s) to use for the y-axis. If a sequence of strings, draws several series\non the same chart by melting your wide-format table into a long-format table behind\nthe scenes. If None, draws the data of all remaining columns as data series.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart width in pixels. If 0, selects the width automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart height in pixels. If 0, selects the height automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over the width argument.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L247"
    },
    "streamlit.audio": {
      "name": "audio",
      "signature": "st.audio(data, format=\"audio/wav\", start_time=0, *, sample_rate=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport numpy as np\n\naudio_file = open('myaudio.ogg', 'rb')\naudio_bytes = audio_file.read()\n\nst.audio(audio_bytes, format='audio/ogg')\n\nsample_rate = 44100  # 44100 samples per second\nseconds = 2  # Note duration of 2 seconds\nfrequency_la = 440  # Our played note will be 440 Hz\n# Generate array with seconds*sample_rate steps, ranging between 0 and seconds\nt = np.linspace(0, seconds, seconds * sample_rate, False)\n# Generate a 440 Hz sine wave\nnote_la = np.sin(frequency_la * t * 2 * np.pi)\n\nst.audio(note_la, sample_rate=sample_rate)\n</pre>\n\n                <Cloud name=\"doc-audio\" path=\"\" query=\"\" stylePlaceholder=\"height: 865px\" />\n            </blockquote>\n",
      "description": "<p>Display an audio player.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "str, bytes, BytesIO, numpy.ndarray, or file opened with",
          "is_optional": false,
          "description": "<p>io.open().\nRaw audio data, filename, or a URL pointing to the file to load.\nRaw data formats must include all necessary file headers to match the file\nformat specified via <tt class=\"docutils literal\">format</tt>.\nIf <tt class=\"docutils literal\">data</tt> is a numpy array, it must either be a 1D array of the waveform\nor a 2D array of shape <tt class=\"docutils literal\">(num_channels, num_samples)</tt> with waveforms\nfor all channels. See the default channel order at\n<a class=\"reference external\" href=\"http://msdn.microsoft.com/en-us/library/windows/hardware/dn653308(v=vs.85).aspx\">http://msdn.microsoft.com/en-us/library/windows/hardware/dn653308(v=vs.85).aspx</a></p>\n",
          "default": "channel"
        },
        {
          "name": "format",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The mime type for the audio file. Defaults to 'audio/wav'.\nSee <a class=\"reference external\" href=\"https://tools.ietf.org/html/rfc4281\">https://tools.ietf.org/html/rfc4281</a> for more info.</p>\n",
          "default": "s"
        },
        {
          "name": "start_time",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The time from which this element should start playing.</p>\n",
          "default": null
        },
        {
          "name": "sample_rate",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The sample rate of the audio data in samples per second. Only required if\n<tt class=\"docutils literal\">data</tt> is a numpy array.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/media.py#L43"
    },
    "streamlit.balloons": {
      "name": "balloons",
      "signature": "st.balloons()",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.balloons()\n</pre>\n<p>...then watch your app and get ready for a celebration!</p>\n</blockquote>\n",
      "description": "<p>Draw celebratory balloons.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/balloons.py#L25"
    },
    "streamlit.bar_chart": {
      "name": "bar_chart",
      "signature": "st.bar_chart(data=None, *, x=None, y=None, width=0, height=0, use_container_width=True)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nchart_data = pd.DataFrame(\n    np.random.randn(20, 3),\n    columns=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n\nst.bar_chart(chart_data)\n</pre>\n\n                <Cloud name=\"doc-bar-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 400px\" />\n            </blockquote>\n",
      "description": "<p>Display a bar chart.</p>\n<p>This is just syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many &quot;just plot\nthis&quot; scenarios, while being less customizable.</p>\n<p>If st.bar_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, or dict",
          "is_optional": false,
          "description": "<p>Data to be plotted.\nPyarrow tables are not supported by Streamlit's legacy DataFrame serialization\n(i.e. with <cite>config.dataFrameSerialization = &quot;legacy&quot;</cite>).\nTo use pyarrow tables, please enable pyarrow by changing the config setting,\n<cite>config.dataFrameSerialization = &quot;arrow&quot;</cite>.</p>\n",
          "default": null
        },
        {
          "name": "x",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>Column name to use for the x-axis. If None, uses the data index for the x-axis.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "y",
          "type_name": "str, sequence of str, or None",
          "is_optional": false,
          "description": "<p>Column name(s) to use for the y-axis. If a sequence of strings, draws several series\non the same chart by melting your wide-format table into a long-format table behind\nthe scenes. If None, draws the data of all remaining columns as data series.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart width in pixels. If 0, selects the width automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart height in pixels. If 0, selects the height automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over the width argument.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L334"
    },
    "streamlit.beta_columns": {
      "name": "beta_columns",
      "signature": "st.beta_columns(spec, *, gap=\"small\")",
      "examples": "<blockquote>\n<p>You can use <cite>with</cite> notation to insert any element into a column:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n   st.header(&quot;A cat&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/cat.jpg&quot;)\n\nwith col2:\n   st.header(&quot;A dog&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/dog.jpg&quot;)\n\nwith col3:\n   st.header(&quot;An owl&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/owl.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-columns1\" path=\"\" query=\"\" stylePlaceholder=\"height: 620px\" />\n            <p>Or you can just call methods directly in the returned objects:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport numpy as np\n\ncol1, col2 = st.columns([3, 1])\ndata = np.random.randn(10, 1)\n\ncol1.subheader(&quot;A wide column with a chart&quot;)\ncol1.line_chart(data)\n\ncol2.subheader(&quot;A narrow column with the data&quot;)\ncol2.write(data)\n</pre>\n\n                <Cloud name=\"doc-columns2\" path=\"\" query=\"\" stylePlaceholder=\"height: 550px\" />\n            </blockquote>\n",
      "description": "<p>Insert containers laid out as side-by-side columns.</p>\n<p>Inserts a number of multi-element containers laid out side-by-side and\nreturns a list of container objects.</p>\n<p>To add elements to the returned containers, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n<p>Columns can only be placed inside other columns up to one level of nesting.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Columns cannot be placed inside other columns in the sidebar. This is only possible in the main area of the app.</p>\n</div>\n",
      "args": [
        {
          "name": "spec",
          "type_name": "int or list of numbers",
          "is_optional": false,
          "description": "<dl class=\"docutils\">\n<dt>If an int</dt>\n<dd>Specifies the number of columns to insert, and all columns\nhave equal width.</dd>\n<dt>If a list of numbers</dt>\n<dd><p class=\"first\">Creates a column for each number, and each\ncolumn's width is proportional to the number provided. Numbers can\nbe ints or floats, but they must be positive.</p>\n<p class=\"last\">For example, <cite>st.columns([3, 1, 2])</cite> creates 3 columns where\nthe first column is 3 times the width of the second, and the last\ncolumn is 2 times that width.</p>\n</dd>\n</dl>\n",
          "default": null
        },
        {
          "name": "gap",
          "type_name": "string (\"small\", \"medium\", or \"large\")",
          "is_optional": false,
          "description": "<p>An optional string, which indicates the size of the gap between each column.\nThe default is a small gap between columns. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "a"
        }
      ],
      "returns": [
        {
          "type_name": "list of containers",
          "is_generator": false,
          "description": "<p>A list of container objects.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L77"
    },
    "streamlit.beta_container": {
      "name": "beta_container",
      "signature": "st.beta_container()",
      "examples": "<blockquote>\n<p>Inserting elements using &quot;with&quot; notation:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nwith st.container():\n   st.write(&quot;This is inside the container&quot;)\n\n   # You can call any Streamlit command, including custom components:\n   st.bar_chart(np.random.randn(50, 3))\n\nst.write(&quot;This is outside the container&quot;)\n</pre>\n\n                <Cloud name=\"doc-container1\" path=\"\" query=\"\" stylePlaceholder=\"height: 520px\" />\n            <p>Inserting elements out of order:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncontainer = st.container()\ncontainer.write(&quot;This is inside the container&quot;)\nst.write(&quot;This is outside the container&quot;)\n\n# Now insert some more in the container\ncontainer.write(&quot;This is inside too&quot;)\n</pre>\n\n                <Cloud name=\"doc-container2\" path=\"\" query=\"\" stylePlaceholder=\"height: 480px\" />\n            </blockquote>\n",
      "description": "<p>Insert a multi-element container.</p>\n<p>Inserts an invisible container into your app that can be used to hold\nmultiple elements. This allows you to, for example, insert multiple\nelements into your app out of order.</p>\n<p>To add elements to the returned container, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L29"
    },
    "streamlit.beta_expander": {
      "name": "beta_expander",
      "signature": "st.beta_expander(label, expanded=False)",
      "examples": "<blockquote>\n<p>You can use <cite>with</cite> notation to insert any element into an expander</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.bar_chart({&quot;data&quot;: [1, 5, 2, 6, 2, 1]})\n\nwith st.expander(&quot;See explanation&quot;):\n    st.write(\\&quot;\\&quot;\\&quot;\n        The chart above shows some numbers I picked for you.\n        I rolled actual dice for these, so they're *guaranteed* to\n        be random.\n    \\&quot;\\&quot;\\&quot;)\n    st.image(&quot;https://static.streamlit.io/examples/dice.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-expander\" path=\"\" query=\"\" stylePlaceholder=\"height: 750px\" />\n            <p>Or you can just call methods directly in the returned objects:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.bar_chart({&quot;data&quot;: [1, 5, 2, 6, 2, 1]})\n\nexpander = st.expander(&quot;See explanation&quot;)\nexpander.write(\\&quot;\\&quot;\\&quot;\n    The chart above shows some numbers I picked for you.\n    I rolled actual dice for these, so they're *guaranteed* to\n    be random.\n\\&quot;\\&quot;\\&quot;)\nexpander.image(&quot;https://static.streamlit.io/examples/dice.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-expander\" path=\"\" query=\"\" stylePlaceholder=\"height: 750px\" />\n            </blockquote>\n",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.</p>\n<p>Inserts a container into your app that can be used to hold multiple elements\nand can be expanded or collapsed by the user. When collapsed, all that is\nvisible is the provided label.</p>\n<p>To add elements to the returned container, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Currently, you may not put expanders inside another expander.</p>\n</div>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A string to use as the header for the expander. The label can optionally\ncontain Markdown and supports the following elements: Bold, Italics,\nStrikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "expanded",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, initializes the expander in &quot;expanded&quot; state. Defaults to\nFalse (collapsed).</p>\n",
          "default": "s"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L320"
    },
    "streamlit.bokeh_chart": {
      "name": "bokeh_chart",
      "signature": "st.bokeh_chart(figure, use_container_width=False)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nfrom bokeh.plotting import figure\n\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 2, 4, 5]\n\np = figure(\n    title='simple line example',\n    x_axis_label='x',\n    y_axis_label='y')\n\np.line(x, y, legend_label='Trend', line_width=2)\n\nst.bokeh_chart(p, use_container_width=True)\n</pre>\n\n                <Cloud name=\"doc-bokeh-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 700px\" />\n            </blockquote>\n",
      "description": "<p>Display an interactive Bokeh chart.</p>\n<p>Bokeh is a charting library for Python. The arguments to this function\nclosely follow the ones for Bokeh's <cite>show</cite> function. You can find\nmore about Bokeh at <a class=\"reference external\" href=\"https://bokeh.pydata.org\">https://bokeh.pydata.org</a>.</p>\n<p>To show Bokeh charts in Streamlit, call <cite>st.bokeh_chart</cite>\nwherever you would call Bokeh's <cite>show</cite>.</p>\n",
      "args": [
        {
          "name": "figure",
          "type_name": "bokeh.plotting.figure.Figure",
          "is_optional": false,
          "description": "<p>A Bokeh figure to plot.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over Bokeh's native <cite>width</cite> value.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/bokeh_chart.py#L36"
    },
    "streamlit.button": {
      "name": "button",
      "signature": "st.button(label, key=None, help=None, on_click=None, args=None, kwargs=None, *, type=\"secondary\", disabled=False, use_container_width=False)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nif st.button('Say hello'):\n    st.write('Why hello there')\nelse:\n    st.write('Goodbye')\n</pre>\n\n                <Cloud name=\"doc-buton\" path=\"\" query=\"\" stylePlaceholder=\"height: 220px\" />\n            </blockquote>\n",
      "description": "<p>Display a button widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this button is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, and Emojis.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed when the button is\nhovered over.</p>\n",
          "default": null
        },
        {
          "name": "on_click",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this button is clicked.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "type",
          "type_name": "\"secondary\" or \"primary\"",
          "is_optional": false,
          "description": "<p>An optional string that specifies the button type. Can be &quot;primary&quot; for a\nbutton with additional emphasis or &quot;secondary&quot; for a normal button. This\nargument can only be supplied by keyword. Defaults to &quot;secondary&quot;.</p>\n",
          "default": "s"
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the button if set to True. The\ndefault is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which makes the button stretch its width to match the parent container.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "bool",
          "is_generator": false,
          "description": "<p>True if the button was clicked on the last run of the app,\nFalse otherwise.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/button.py#L61"
    },
    "streamlit.cache": {
      "name": "cache",
      "signature": "st.cache(func=None, persist=False, allow_output_mutation=False, show_spinner=True, suppress_st_warning=False, hash_funcs=None, max_entries=None, ttl=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n\nd1 = fetch_and_clean_data(DATA_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\nd2 = fetch_and_clean_data(DATA_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value. This means that now the data in d1 is the same as in d2.\n\nd3 = fetch_and_clean_data(DATA_URL_2)\n# This is a different URL, so the function executes.\n</pre>\n<p>To set the <tt class=\"docutils literal\">persist</tt> parameter, use this command as follows:</p>\n<pre class=\"doctest-block\">\n&#64;st.cache(persist=True)\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n</pre>\n<p>To disable hashing return values, set the <tt class=\"docutils literal\">allow_output_mutation</tt> parameter to <tt class=\"docutils literal\">True</tt>:</p>\n<pre class=\"doctest-block\">\n&#64;st.cache(allow_output_mutation=True)\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n</pre>\n<p>To override the default hashing behavior, pass a custom hash function.\nYou can do that by mapping a type (e.g. <tt class=\"docutils literal\">MongoClient</tt>) to a hash function (<tt class=\"docutils literal\">id</tt>) like this:</p>\n<pre class=\"doctest-block\">\n&#64;st.cache(hash_funcs={MongoClient: id})\ndef connect_to_database(url):\n    return MongoClient(url)\n</pre>\n<p>Alternatively, you can map the type's fully-qualified name\n(e.g. <tt class=\"docutils literal\">&quot;pymongo.mongo_client.MongoClient&quot;</tt>) to the hash function instead:</p>\n<pre class=\"doctest-block\">\n&#64;st.cache(hash_funcs={&quot;pymongo.mongo_client.MongoClient&quot;: id})\ndef connect_to_database(url):\n    return MongoClient(url)\n</pre>\n</blockquote>\n",
      "description": "<p>Function decorator to memoize function executions.</p>\n",
      "args": [
        {
          "name": "func",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>The function to cache. Streamlit hashes the function and dependent code.</p>\n",
          "default": null
        },
        {
          "name": "persist",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Whether to persist the cache on disk.</p>\n",
          "default": null
        },
        {
          "name": "allow_output_mutation",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Streamlit shows a warning when return values are mutated, as that\ncan have unintended consequences. This is done by hashing the return value internally.</p>\n<p>If you know what you're doing and would like to override this warning, set this to True.</p>\n",
          "default": null
        },
        {
          "name": "show_spinner",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Enable the spinner. Default is True to show a spinner when there is\na cache miss.</p>\n",
          "default": "True"
        },
        {
          "name": "suppress_st_warning",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Suppress warnings about calling Streamlit commands from within\nthe cached function.</p>\n",
          "default": null
        },
        {
          "name": "hash_funcs",
          "type_name": "dict or None",
          "is_optional": false,
          "description": "<p>Mapping of types or fully qualified names to hash functions. This is used to override\nthe behavior of the hasher inside Streamlit's caching mechanism: when the hasher\nencounters an object, it will first check to see if its type matches a key in this\ndict and, if so, will use the provided function to generate a hash for it. See below\nfor an example of how this can be used.</p>\n",
          "default": null
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "ttl",
          "type_name": "float or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.</p>\n",
          "default": "None."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/legacy_caching/caching.py#L486"
    },
    "streamlit.cache_data": {
      "name": "cache_data",
      "signature": "st.cache_data(func=None, *, ttl, max_entries, show_spinner, persist, experimental_allow_widgets)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n\nd1 = fetch_and_clean_data(DATA_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\nd2 = fetch_and_clean_data(DATA_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value. This means that now the data in d1 is the same as in d2.\n\nd3 = fetch_and_clean_data(DATA_URL_2)\n# This is a different URL, so the function executes.\n</pre>\n<p>To set the <tt class=\"docutils literal\">persist</tt> parameter, use this command as follows:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data(persist=&quot;disk&quot;)\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n</pre>\n<p>By default, all parameters to a cached function must be hashable.\nAny parameter whose name begins with <tt class=\"docutils literal\">_</tt> will not be hashed. You can use\nthis as an &quot;escape hatch&quot; for parameters that are not hashable:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(_db_connection, num_rows):\n    # Fetch data from _db_connection here, and then clean it up.\n    return data\n\nconnection = make_database_connection()\nd1 = fetch_and_clean_data(connection, num_rows=10)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\nanother_connection = make_database_connection()\nd2 = fetch_and_clean_data(another_connection, num_rows=10)\n# Does not execute the function. Instead, returns its previously computed\n# value - even though the _database_connection parameter was different\n# in both calls.\n</pre>\n<p>A cached function's cache can be procedurally cleared:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(_db_connection, num_rows):\n    # Fetch data from _db_connection here, and then clean it up.\n    return data\n\nfetch_and_clean_data.clear()\n# Clear all cached entries for this function.\n</pre>\n</blockquote>\n",
      "description": "<p>Decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).</p>\n<p>Cached objects are stored in &quot;pickled&quot; form, which means that the return\nvalue of a cached function must be pickleable. Each caller of the cached\nfunction gets its own copy of the cached data.</p>\n<p>You can clear a function's cache with <tt class=\"docutils literal\">func.clear()</tt> or clear the entire\ncache with <tt class=\"docutils literal\">st.cache_data.clear()</tt>.</p>\n<p>To cache global resources, use <tt class=\"docutils literal\">st.cache_resource</tt> instead. Learn more\nabout caching at <a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/caching\">https://docs.streamlit.io/library/advanced-features/caching</a>.</p>\n",
      "args": [
        {
          "name": "func",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>The function to cache. Streamlit hashes the function's source code.</p>\n",
          "default": null
        },
        {
          "name": "ttl",
          "type_name": "float or timedelta or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.\nNote that ttl is incompatible with <tt class=\"docutils literal\"><span class=\"pre\">persist=&quot;disk&quot;</span></tt> - <tt class=\"docutils literal\">ttl</tt> will be\nignored if <tt class=\"docutils literal\">persist</tt> is specified.</p>\n",
          "default": "None."
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "show_spinner",
          "type_name": "boolean or string",
          "is_optional": false,
          "description": "<p>Enable the spinner. Default is True to show a spinner when there is\na &quot;cache miss&quot; and the cached data is being created. If string,\nvalue of show_spinner param will be used for spinner text.</p>\n",
          "default": "True"
        },
        {
          "name": "persist",
          "type_name": "str or boolean or None",
          "is_optional": false,
          "description": "<p>Optional location to persist cached data to. Passing &quot;disk&quot; (or True)\nwill persist the cached data to the local disk. None (or False) will disable\npersistence. The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "experimental_allow_widgets",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Allow widgets to be used in the cached function. Defaults to False.\nSupport for widgets in cached functions is currently experimental.\nSetting this parameter to True may lead to excessive memory use since the\nwidget value is treated as an additional input parameter to the cache.\nWe may remove support for this option at any time without notice.</p>\n",
          "default": "False."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/caching/cache_data_api.py#L378"
    },
    "streamlit.cache_resource": {
      "name": "cache_resource",
      "signature": "st.cache_resource(func, *, ttl, max_entries, show_spinner, validate, experimental_allow_widgets)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(url):\n    # Create a database session object that points to the URL.\n    return session\n\ns1 = get_database_session(SESSION_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\ns2 = get_database_session(SESSION_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value. This means that now the connection object in s1 is the same as in s2.\n\ns3 = get_database_session(SESSION_URL_2)\n# This is a different URL, so the function executes.\n</pre>\n<p>By default, all parameters to a cache_resource function must be hashable.\nAny parameter whose name begins with <tt class=\"docutils literal\">_</tt> will not be hashed. You can use\nthis as an &quot;escape hatch&quot; for parameters that are not hashable:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(_sessionmaker, url):\n    # Create a database connection object that points to the URL.\n    return connection\n\ns1 = get_database_session(create_sessionmaker(), DATA_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\ns2 = get_database_session(create_sessionmaker(), DATA_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value - even though the _sessionmaker parameter was different\n# in both calls.\n</pre>\n<p>A cache_resource function's cache can be procedurally cleared:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(_sessionmaker, url):\n    # Create a database connection object that points to the URL.\n    return connection\n\nget_database_session.clear()\n# Clear all cached entries for this function.\n</pre>\n</blockquote>\n",
      "description": "<p>Decorator to cache functions that return global resources (e.g. database connections, ML models).</p>\n<p>Cached objects are shared across all users, sessions, and reruns. They\nmust be thread-safe because they can be accessed from multiple threads\nconcurrently. If thread safety is an issue, consider using <tt class=\"docutils literal\">st.session_state</tt>\nto store resources per session instead.</p>\n<p>You can clear a function's cache with <tt class=\"docutils literal\">func.clear()</tt> or clear the entire\ncache with <tt class=\"docutils literal\">st.cache_resource.clear()</tt>.</p>\n<p>To cache data, use <tt class=\"docutils literal\">st.cache_data</tt> instead. Learn more about caching at\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/caching\">https://docs.streamlit.io/library/advanced-features/caching</a>.</p>\n",
      "args": [
        {
          "name": "func",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>The function that creates the cached resource. Streamlit hashes the\nfunction's source code.</p>\n",
          "default": null
        },
        {
          "name": "ttl",
          "type_name": "float or timedelta or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "show_spinner",
          "type_name": "boolean or string",
          "is_optional": false,
          "description": "<p>Enable the spinner. Default is True to show a spinner when there is\na &quot;cache miss&quot; and the cached resource is being created. If string,\nvalue of show_spinner param will be used for spinner text.</p>\n",
          "default": "True"
        },
        {
          "name": "validate",
          "type_name": "callable or None",
          "is_optional": false,
          "description": "<p>An optional validation function for cached data. <tt class=\"docutils literal\">validate</tt> is called\neach time the cached value is accessed. It receives the cached value as\nits only parameter and it must return a boolean. If <tt class=\"docutils literal\">validate</tt> returns\nFalse, the current cached value is discarded, and the decorated function\nis called to compute a new value. This is useful e.g. to check the\nhealth of database connections.</p>\n",
          "default": null
        },
        {
          "name": "experimental_allow_widgets",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Allow widgets to be used in the cached function. Defaults to False.\nSupport for widgets in cached functions is currently experimental.\nSetting this parameter to True may lead to excessive memory use since the\nwidget value is treated as an additional input parameter to the cache.\nWe may remove support for this option at any time without notice.</p>\n",
          "default": "False."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/caching/cache_resource_api.py#L258"
    },
    "streamlit.camera_input": {
      "name": "camera_input",
      "signature": "st.camera_input(label, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\npicture = st.camera_input(&quot;Take a picture&quot;)\n\nif picture:\n    st.image(picture)\n</pre>\n</blockquote>\n",
      "description": "<p>Display a widget that returns pictures from the user's webcam.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this widget is used for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A tooltip that gets displayed next to the camera input.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this camera_input's value\nchanges.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the camera input if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "None or UploadedFile",
          "is_generator": false,
          "description": "<p>The UploadedFile class is a subclass of BytesIO, and therefore\nit is &quot;file-like&quot;. This means you can pass them anywhere where\na file is expected.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/camera_input.py#L109"
    },
    "streamlit.caption": {
      "name": "caption",
      "signature": "st.caption(body, unsafe_allow_html=False, *, help=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.caption('This is a string that explains something above.')\nst.caption('A caption with _italics_ :blue[colors] and emojis :sunglasses:')\n</pre>\n</blockquote>\n",
      "description": "<p>Display text in small font.</p>\n<p>This should be used for captions, asides, footnotes, sidenotes, and\nother explanatory text.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The text to display as Github-flavored Markdown. Syntax\ninformation can be found at: <a class=\"reference external\" href=\"https://github.github.com/gfm\">https://github.github.com/gfm</a>.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "unsafe_allow_html",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>By default, any HTML tags found in strings will be escaped and\ntherefore treated as pure text. This behavior may be turned off by\nsetting this argument to True.</p>\n<p>That said, <em>we strongly advise against it</em>. It is hard to write secure\nHTML, so by using this argument you may be compromising your users'\nsecurity. For more information, see:</p>\n<p><a class=\"reference external\" href=\"https://github.com/streamlit/streamlit/issues/152\">https://github.com/streamlit/streamlit/issues/152</a></p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the caption.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/markdown.py#L132"
    },
    "streamlit.checkbox": {
      "name": "checkbox",
      "signature": "st.checkbox(label, value=False, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nagree = st.checkbox('I agree')\n\nif agree:\n    st.write('Great!')\n</pre>\n\n                <Cloud name=\"doc-checkbox\" path=\"\" query=\"\" stylePlaceholder=\"height: 220px\" />\n            </blockquote>\n",
      "description": "<p>Display a checkbox widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this checkbox is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>Preselect the checkbox when it first renders. This will be\ncast to bool internally.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the checkbox.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this checkbox's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the checkbox if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "bool",
          "is_generator": false,
          "description": "<p>Whether or not the checkbox is checked.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/checkbox.py#L52"
    },
    "streamlit.code": {
      "name": "code",
      "signature": "st.code(body, language=\"python\", line_numbers=False)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncode = '''def hello():\n    print(&quot;Hello, Streamlit!&quot;)'''\nst.code(code, language='python')\n</pre>\n</blockquote>\n",
      "description": "<p>Display a code block with optional syntax highlighting.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The string to display as code.</p>\n",
          "default": null
        },
        {
          "name": "language",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>The language that the code is written in, for syntax highlighting.\nIf <tt class=\"docutils literal\">None</tt>, the code will be unstyled. Defaults to <tt class=\"docutils literal\">&quot;python&quot;</tt>.</p>\n<p>For a list of available <tt class=\"docutils literal\">language</tt> values, see:</p>\n<p><a class=\"reference external\" href=\"https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_PRISM.MD\">https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_PRISM.MD</a></p>\n",
          "default": "s"
        },
        {
          "name": "line_numbers",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean indicating whether to show line numbers to the\nleft of the code block. Defaults to <tt class=\"docutils literal\">False</tt>.</p>\n",
          "default": "s"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/code.py#L27"
    },
    "streamlit.color_picker": {
      "name": "color_picker",
      "signature": "st.color_picker(label, value=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncolor = st.color_picker('Pick A Color', '#00f900')\nst.write('The current color is', color)\n</pre>\n\n                <Cloud name=\"doc-color-picker\" path=\"\" query=\"\" stylePlaceholder=\"height: 335px\" />\n            </blockquote>\n",
      "description": "<p>Display a color picker widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The hex value of this widget when it first renders. If None,\ndefaults to black.</p>\n",
          "default": "black."
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the color picker.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this color_picker's value\nchanges.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the color picker if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn\u2019t show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "str",
          "is_generator": false,
          "description": "<p>The selected color as a hex string.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/color_picker.py#L52"
    },
    "streamlit.columns": {
      "name": "columns",
      "signature": "st.columns(spec, *, gap=\"small\")",
      "examples": "<blockquote>\n<p>You can use <cite>with</cite> notation to insert any element into a column:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n   st.header(&quot;A cat&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/cat.jpg&quot;)\n\nwith col2:\n   st.header(&quot;A dog&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/dog.jpg&quot;)\n\nwith col3:\n   st.header(&quot;An owl&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/owl.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-columns1\" path=\"\" query=\"\" stylePlaceholder=\"height: 620px\" />\n            <p>Or you can just call methods directly in the returned objects:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport numpy as np\n\ncol1, col2 = st.columns([3, 1])\ndata = np.random.randn(10, 1)\n\ncol1.subheader(&quot;A wide column with a chart&quot;)\ncol1.line_chart(data)\n\ncol2.subheader(&quot;A narrow column with the data&quot;)\ncol2.write(data)\n</pre>\n\n                <Cloud name=\"doc-columns2\" path=\"\" query=\"\" stylePlaceholder=\"height: 550px\" />\n            </blockquote>\n",
      "description": "<p>Insert containers laid out as side-by-side columns.</p>\n<p>Inserts a number of multi-element containers laid out side-by-side and\nreturns a list of container objects.</p>\n<p>To add elements to the returned containers, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n<p>Columns can only be placed inside other columns up to one level of nesting.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Columns cannot be placed inside other columns in the sidebar. This is only possible in the main area of the app.</p>\n</div>\n",
      "args": [
        {
          "name": "spec",
          "type_name": "int or list of numbers",
          "is_optional": false,
          "description": "<dl class=\"docutils\">\n<dt>If an int</dt>\n<dd>Specifies the number of columns to insert, and all columns\nhave equal width.</dd>\n<dt>If a list of numbers</dt>\n<dd><p class=\"first\">Creates a column for each number, and each\ncolumn's width is proportional to the number provided. Numbers can\nbe ints or floats, but they must be positive.</p>\n<p class=\"last\">For example, <cite>st.columns([3, 1, 2])</cite> creates 3 columns where\nthe first column is 3 times the width of the second, and the last\ncolumn is 2 times that width.</p>\n</dd>\n</dl>\n",
          "default": null
        },
        {
          "name": "gap",
          "type_name": "string (\"small\", \"medium\", or \"large\")",
          "is_optional": false,
          "description": "<p>An optional string, which indicates the size of the gap between each column.\nThe default is a small gap between columns. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "a"
        }
      ],
      "returns": [
        {
          "type_name": "list of containers",
          "is_generator": false,
          "description": "<p>A list of container objects.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L77"
    },
    "streamlit.container": {
      "name": "container",
      "signature": "st.container()",
      "examples": "<blockquote>\n<p>Inserting elements using &quot;with&quot; notation:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nwith st.container():\n   st.write(&quot;This is inside the container&quot;)\n\n   # You can call any Streamlit command, including custom components:\n   st.bar_chart(np.random.randn(50, 3))\n\nst.write(&quot;This is outside the container&quot;)\n</pre>\n\n                <Cloud name=\"doc-container1\" path=\"\" query=\"\" stylePlaceholder=\"height: 520px\" />\n            <p>Inserting elements out of order:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncontainer = st.container()\ncontainer.write(&quot;This is inside the container&quot;)\nst.write(&quot;This is outside the container&quot;)\n\n# Now insert some more in the container\ncontainer.write(&quot;This is inside too&quot;)\n</pre>\n\n                <Cloud name=\"doc-container2\" path=\"\" query=\"\" stylePlaceholder=\"height: 480px\" />\n            </blockquote>\n",
      "description": "<p>Insert a multi-element container.</p>\n<p>Inserts an invisible container into your app that can be used to hold\nmultiple elements. This allows you to, for example, insert multiple\nelements into your app out of order.</p>\n<p>To add elements to the returned container, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L29"
    },
    "streamlit.dataframe": {
      "name": "dataframe",
      "signature": "st.dataframe(data=None, width=None, height=None, *, use_container_width=False)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n   np.random.randn(50, 20),\n   columns=('col %d' % i for i in range(20)))\n\nst.dataframe(df)  # Same as st.write(df)\n</pre>\n\n                <Cloud name=\"doc-dataframe\" path=\"\" query=\"\" stylePlaceholder=\"height: 410px\" />\n            <pre class=\"doctest-block\">\nst.dataframe(df, 200, 100)\n</pre>\n<p>You can also pass a Pandas Styler object to change the style of\nthe rendered DataFrame:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n   np.random.randn(10, 20),\n   columns=('col %d' % i for i in range(20)))\n\nst.dataframe(df.style.highlight_max(axis=0))\n</pre>\n\n                <Cloud name=\"doc-dataframe1\" path=\"\" query=\"\" stylePlaceholder=\"height: 410px\" />\n            </blockquote>\n",
      "description": "<p>Display a dataframe as an interactive table.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, dict, or None",
          "is_optional": false,
          "description": "<p>The data to display.</p>\n<p>If 'data' is a pandas.Styler, it will be used to style its\nunderlying DataFrame. Streamlit supports custom cell\nvalues and colors. (It does not support some of the more exotic\npandas styling features, like bar charts, hovering, and captions.)\nStyler support is experimental!\nPyarrow tables are not supported by Streamlit's legacy DataFrame serialization\n(i.e. with <cite>config.dataFrameSerialization = &quot;legacy&quot;</cite>).\nTo use pyarrow tables, please enable pyarrow by changing the config setting,\n<cite>config.dataFrameSerialization = &quot;arrow&quot;</cite>.</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Desired width of the dataframe expressed in pixels. If None, the width\nwill be automatically calculated based on the column content.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Desired height of the dataframe expressed in pixels. If None, a\ndefault height is used.</p>\n",
          "default": "height"
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the dataframe width to the width of the parent container.\nThis takes precedence over the width argument.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L40"
    },
    "streamlit.date_input": {
      "name": "date_input",
      "signature": "st.date_input(label, value=None, min_value=None, max_value=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport datetime\nimport streamlit as st\n\nd = st.date_input(\n    &quot;When\\'s your birthday&quot;,\n    datetime.date(2019, 7, 6))\nst.write('Your birthday is:', d)\n</pre>\n\n                <Cloud name=\"doc-date-input\" path=\"\" query=\"\" stylePlaceholder=\"height: 260px\" />\n            </blockquote>\n",
      "description": "<p>Display a date input widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this date input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "datetime.date or datetime.datetime or list/tuple of datetime.date or datetime.datetime or None",
          "is_optional": false,
          "description": "<p>The value of this widget when it first renders. If a list/tuple with\n0 to 2 date/datetime values is provided, the datepicker will allow\nusers to provide a range. Defaults to today as a single-date picker.</p>\n",
          "default": "today"
        },
        {
          "name": "min_value",
          "type_name": "datetime.date or datetime.datetime",
          "is_optional": false,
          "description": "<p>The minimum selectable date. If value is a date, defaults to value - 10 years.\nIf value is the interval [start, end], defaults to start - 10 years.</p>\n",
          "default": "value"
        },
        {
          "name": "max_value",
          "type_name": "datetime.date or datetime.datetime",
          "is_optional": false,
          "description": "<p>The maximum selectable date. If value is a date, defaults to value + 10 years.\nIf value is the interval [start, end], defaults to end + 10 years.</p>\n",
          "default": "value"
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the input.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this date_input's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the date input if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "datetime.date or a tuple with 0-2 dates",
          "is_generator": false,
          "description": "<p>The current value of the date input widget.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/time_widgets.py#L399"
    },
    "streamlit.divider": {
      "name": "divider",
      "signature": "st.divider()",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.divider()\n</pre>\n</blockquote>\n",
      "description": "<p>Display a horizontal rule.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">You can achieve the same effect with st.write(&quot;---&quot;) or\neven just &quot;---&quot; in your script (via magic).</p>\n</div>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/markdown.py#L244"
    },
    "streamlit.download_button": {
      "name": "download_button",
      "signature": "st.download_button(label, data, file_name=None, mime=None, key=None, help=None, on_click=None, args=None, kwargs=None, *, disabled=False, use_container_width=False)",
      "examples": "<blockquote>\n<p>Download a large DataFrame as a CSV:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache\ndef convert_df(df):\n    # IMPORTANT: Cache the conversion to prevent computation on every rerun\n    return df.to_csv().encode('utf-8')\n\ncsv = convert_df(my_large_df)\n\nst.download_button(\n    label=&quot;Download data as CSV&quot;,\n    data=csv,\n    file_name='large_df.csv',\n    mime='text/csv',\n)\n</pre>\n<p>Download a string as a file:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ntext_contents = '''This is some text'''\nst.download_button('Download some text', text_contents)\n</pre>\n<p>Download a binary file:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nbinary_contents = b'example content'\n# Defaults to 'application/octet-stream'\nst.download_button('Download binary file', binary_contents)\n</pre>\n<p>Download an image:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nwith open(&quot;flower.png&quot;, &quot;rb&quot;) as file:\n    btn = st.download_button(\n            label=&quot;Download image&quot;,\n            data=file,\n            file_name=&quot;flower.png&quot;,\n            mime=&quot;image/png&quot;\n          )\n</pre>\n\n                <Cloud name=\"doc-download-buton\" path=\"\" query=\"\" stylePlaceholder=\"height: 335px\" />\n            </blockquote>\n",
      "description": "<p>Display a download button widget.</p>\n<p>This is useful when you would like to provide a way for your users\nto download a file directly from your app.</p>\n<p>Note that the data to be downloaded is stored in-memory while the\nuser is connected, so it's a good idea to keep file sizes under a\ncouple hundred megabytes to conserve memory.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this button is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, and Emojis.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "data",
          "type_name": "str or bytes or file",
          "is_optional": false,
          "description": "<p>The contents of the file to be downloaded. See example below for\ncaching techniques to avoid recomputing this data unnecessarily.</p>\n",
          "default": null
        },
        {
          "name": "file_name",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional string to use as the name of the file to be downloaded,\nsuch as 'my_file.csv'. If not specified, the name will be\nautomatically generated.</p>\n",
          "default": null
        },
        {
          "name": "mime",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>The MIME type of the data. If None, defaults to &quot;text/plain&quot;\n(if data is of type <em>str</em> or is a textual <em>file</em>) or\n&quot;application/octet-stream&quot; (if data is of type <em>bytes</em> or is a\nbinary <em>file</em>).</p>\n",
          "default": "s"
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed when the button is\nhovered over.</p>\n",
          "default": null
        },
        {
          "name": "on_click",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this button is clicked.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the download button if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which makes the button stretch its width to match the parent container.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "bool",
          "is_generator": false,
          "description": "<p>True if the button was clicked on the last run of the app,\nFalse otherwise.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/button.py#L169"
    },
    "streamlit.echo": {
      "name": "echo",
      "signature": "st.echo(code_location=\"above\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nwith st.echo():\n    st.write('This code will be printed')\n</pre>\n</blockquote>\n",
      "description": "<p>Use in a <cite>with</cite> block to draw some code on the app, then execute it.</p>\n",
      "args": [
        {
          "name": "code_location",
          "type_name": "\"above\" or \"below\"",
          "is_optional": false,
          "description": "<p>Whether to show the echoed code before or after the results of the\nexecuted code block.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/echo.py#L27"
    },
    "streamlit.empty": {
      "name": "empty",
      "signature": "st.empty()",
      "examples": "<blockquote>\n<p>Overwriting elements in-place using &quot;with&quot; notation:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport time\n\nwith st.empty():\n    for seconds in range(60):\n        st.write(f&quot;\u23f3 {seconds} seconds have passed&quot;)\n        time.sleep(1)\n    st.write(&quot;\u2714\ufe0f 1 minute over!&quot;)\n</pre>\n<p>Replacing several elements, then clearing them:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nplaceholder = st.empty()\n\n# Replace the placeholder with some text:\nplaceholder.text(&quot;Hello&quot;)\n\n# Replace the text with a chart:\nplaceholder.line_chart({&quot;data&quot;: [1, 5, 2, 6]})\n\n# Replace the chart with several elements:\nwith placeholder.container():\n    st.write(&quot;This is one element&quot;)\n    st.write(&quot;This is another&quot;)\n\n# Clear all those elements:\nplaceholder.empty()\n</pre>\n</blockquote>\n",
      "description": "<p>Insert a single-element container.</p>\n<p>Inserts a container into your app that can be used to hold a single element.\nThis allows you to, for example, remove elements at any point, or replace\nseveral elements at once (using a child multi-element container).</p>\n<p>To insert/replace/clear an element on the returned container, you can\nuse &quot;with&quot; notation or just call methods directly on the returned object.\nSee examples below.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/empty.py#L24"
    },
    "streamlit.error": {
      "name": "error",
      "signature": "st.error(body, *, icon=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.error('This is an error', icon=&quot;\ud83d\udea8&quot;)\n</pre>\n</blockquote>\n",
      "description": "<p>Display error message.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The error text to display.</p>\n",
          "default": null
        },
        {
          "name": "icon",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>An optional, keyword-only argument that specifies an emoji to use as\nthe icon for the alert. Shortcodes are not allowed, please use a\nsingle character instead. E.g. &quot;\ud83d\udea8&quot;, &quot;\ud83d\udd25&quot;, &quot;\ud83e\udd16&quot;, etc.\nDefaults to None, which means no icon is displayed.</p>\n",
          "default": "None"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/alert.py#L39"
    },
    "streamlit.exception": {
      "name": "exception",
      "signature": "st.exception(exception)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ne = RuntimeError('This is an exception of type RuntimeError')\nst.exception(e)\n</pre>\n</blockquote>\n",
      "description": "<p>Display an exception.</p>\n",
      "args": [
        {
          "name": "exception",
          "type_name": "Exception",
          "is_optional": false,
          "description": "<p>The exception to display.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/exception.py#L50"
    },
    "streamlit.expander": {
      "name": "expander",
      "signature": "st.expander(label, expanded=False)",
      "examples": "<blockquote>\n<p>You can use <cite>with</cite> notation to insert any element into an expander</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.bar_chart({&quot;data&quot;: [1, 5, 2, 6, 2, 1]})\n\nwith st.expander(&quot;See explanation&quot;):\n    st.write(\\&quot;\\&quot;\\&quot;\n        The chart above shows some numbers I picked for you.\n        I rolled actual dice for these, so they're *guaranteed* to\n        be random.\n    \\&quot;\\&quot;\\&quot;)\n    st.image(&quot;https://static.streamlit.io/examples/dice.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-expander\" path=\"\" query=\"\" stylePlaceholder=\"height: 750px\" />\n            <p>Or you can just call methods directly in the returned objects:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.bar_chart({&quot;data&quot;: [1, 5, 2, 6, 2, 1]})\n\nexpander = st.expander(&quot;See explanation&quot;)\nexpander.write(\\&quot;\\&quot;\\&quot;\n    The chart above shows some numbers I picked for you.\n    I rolled actual dice for these, so they're *guaranteed* to\n    be random.\n\\&quot;\\&quot;\\&quot;)\nexpander.image(&quot;https://static.streamlit.io/examples/dice.jpg&quot;)\n</pre>\n\n                <Cloud name=\"doc-expander\" path=\"\" query=\"\" stylePlaceholder=\"height: 750px\" />\n            </blockquote>\n",
      "description": "<p>Insert a multi-element container that can be expanded/collapsed.</p>\n<p>Inserts a container into your app that can be used to hold multiple elements\nand can be expanded or collapsed by the user. When collapsed, all that is\nvisible is the provided label.</p>\n<p>To add elements to the returned container, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Currently, you may not put expanders inside another expander.</p>\n</div>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A string to use as the header for the expander. The label can optionally\ncontain Markdown and supports the following elements: Bold, Italics,\nStrikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "expanded",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, initializes the expander in &quot;expanded&quot; state. Defaults to\nFalse (collapsed).</p>\n",
          "default": "s"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L320"
    },
    "streamlit.experimental_connection": {
      "name": "experimental_connection",
      "signature": "st.experimental_connection(name, type=None, max_entries=None, ttl=None, **kwargs)",
      "examples": "<blockquote>\n<p>The easiest way to create a first-party (SQL or Snowpark) connection is to use their\ndefault names and define corresponding sections in your <tt class=\"docutils literal\">secrets.toml</tt> file.</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nconn = st.experimental_connection(&quot;sql&quot;) # Config section defined in [connections.sql] in secrets.toml.\n</pre>\n<p>Creating a SQLConnection with a custom name requires you to explicitly specify the\ntype. If type is not passed as a kwarg, it must be set in the appropriate section of\n<tt class=\"docutils literal\">secrets.toml</tt>.</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nconn1 = st.experimental_connection(&quot;my_sql_connection&quot;, type=&quot;sql&quot;) # Config section defined in [connections.my_sql_connection].\nconn2 = st.experimental_connection(&quot;my_other_sql_connection&quot;) # type must be set in [connections.my_other_sql_connection].\n</pre>\n<p>Passing the full module path to the connection class that you want to use can be\nuseful, especially when working with a custom connection:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nconn = st.experimental_connection(&quot;my_sql_connection&quot;, type=&quot;streamlit.connections.SQLConnection&quot;)\n</pre>\n<p>Finally, you can pass the connection class to use directly to this function. Doing\nso allows static type checking tools such as <tt class=\"docutils literal\">mypy</tt> to infer the exact return\ntype of <tt class=\"docutils literal\">st.experimental_connection</tt>.</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nfrom streamlit.connections import SQLConnection\nconn = st.experimental_connection(&quot;my_sql_connection&quot;, type=SQLConnection)\n</pre>\n</blockquote>\n",
      "description": "<p>Create a new connection to a data store or API, or return an existing one.</p>\n<p>Config options, credentials, secrets, etc. for connections are taken from various\nsources:</p>\n<ul class=\"simple\">\n<li>Any connection-specific configuration files.</li>\n<li>An app's <tt class=\"docutils literal\">secrets.toml</tt> files.</li>\n<li>The kwargs passed to this function.</li>\n</ul>\n",
      "args": [
        {
          "name": "name",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The connection name used for secrets lookup in <tt class=\"docutils literal\"><span class=\"pre\">[connections.&lt;name&gt;]</span></tt>.\nType will be inferred from passing <tt class=\"docutils literal\">&quot;sql&quot;</tt> or <tt class=\"docutils literal\">&quot;snowpark&quot;</tt>.</p>\n",
          "default": null
        },
        {
          "name": "type",
          "type_name": "str or connection class or None",
          "is_optional": false,
          "description": "<p>The type of connection to create. It can be a keyword (<tt class=\"docutils literal\">&quot;sql&quot;</tt> or <tt class=\"docutils literal\">&quot;snowpark&quot;</tt>),\na path to an importable class, or an imported class reference. All classes\nmust extend <tt class=\"docutils literal\">st.connections.ExperimentalBaseConnection</tt> and implement the\n<tt class=\"docutils literal\">_connect()</tt> method. If the type kwarg is None, a <tt class=\"docutils literal\">type</tt> field must be set\nin the connection's section in <tt class=\"docutils literal\">secrets.toml</tt>.</p>\n",
          "default": null
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of connections to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "ttl",
          "type_name": "float or timedelta or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep results in the cache, or\nNone if cached results should not expire. The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "**kwargs",
          "type_name": "any",
          "is_optional": false,
          "description": "<p>Additional connection specific kwargs that are passed to the Connection's\n<tt class=\"docutils literal\">_connect()</tt> method. Learn more from the specific Connection's documentation.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "Connection object",
          "is_generator": false,
          "description": "<p>An initialized Connection object of the specified type.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/connection_factory.py#L170"
    },
    "streamlit.experimental_data_editor": {
      "name": "experimental_data_editor",
      "signature": "st.experimental_data_editor(data, *, width=None, height=None, use_container_width=False, num_rows=\"fixed\", disabled=False, key=None, on_change=None, args=None, kwargs=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [\n       {&quot;command&quot;: &quot;st.selectbox&quot;, &quot;rating&quot;: 4, &quot;is_widget&quot;: True},\n       {&quot;command&quot;: &quot;st.balloons&quot;, &quot;rating&quot;: 5, &quot;is_widget&quot;: False},\n       {&quot;command&quot;: &quot;st.time_input&quot;, &quot;rating&quot;: 3, &quot;is_widget&quot;: True},\n   ]\n)\nedited_df = st.experimental_data_editor(df)\n\nfavorite_command = edited_df.loc[edited_df[&quot;rating&quot;].idxmax()][&quot;command&quot;]\nst.markdown(f&quot;Your favorite command is **{favorite_command}** \ud83c\udf88&quot;)\n</pre>\n\n                <Cloud name=\"doc-data-editor\" path=\"\" query=\"\" stylePlaceholder=\"height: 350px\" />\n            <p>You can also allow the user to add and delete rows by setting <tt class=\"docutils literal\">num_rows</tt> to &quot;dynamic&quot;:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [\n       {&quot;command&quot;: &quot;st.selectbox&quot;, &quot;rating&quot;: 4, &quot;is_widget&quot;: True},\n       {&quot;command&quot;: &quot;st.balloons&quot;, &quot;rating&quot;: 5, &quot;is_widget&quot;: False},\n       {&quot;command&quot;: &quot;st.time_input&quot;, &quot;rating&quot;: 3, &quot;is_widget&quot;: True},\n   ]\n)\nedited_df = st.experimental_data_editor(df, num_rows=&quot;dynamic&quot;)\n\nfavorite_command = edited_df.loc[edited_df[&quot;rating&quot;].idxmax()][&quot;command&quot;]\nst.markdown(f&quot;Your favorite command is **{favorite_command}** \ud83c\udf88&quot;)\n</pre>\n\n                <Cloud name=\"doc-data-editor1\" path=\"\" query=\"\" stylePlaceholder=\"height: 450px\" />\n            </blockquote>\n",
      "description": "<p>Display a data editor widget.</p>\n<p>Display a data editor widget that allows you to edit DataFrames and\nmany other data structures in a table-like UI.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pandas.Index, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.DataFrame, list, set, tuple, dict, or None",
          "is_optional": false,
          "description": "<p>The data to edit in the data editor.</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Desired width of the data editor expressed in pixels. If None, the width will\nbe automatically determined.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Desired height of the data editor expressed in pixels. If None, the height will\nbe automatically determined.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the data editor width to the width of the parent container.\nThis takes precedence over the width argument. Defaults to False.</p>\n",
          "default": "False."
        },
        {
          "name": "num_rows",
          "type_name": "\"fixed\" or \"dynamic\"",
          "is_optional": false,
          "description": "<p>Specifies if the user can add and delete rows in the data editor.\nIf &quot;fixed&quot;, the user cannot add or delete rows. If &quot;dynamic&quot;, the user can\nadd and delete rows in the data editor, but column sorting is disabled.\nDefaults to &quot;fixed&quot;.</p>\n",
          "default": "s"
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean which, if True, disables the data editor and prevents\nany edits. Defaults to False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "key",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional string to use as the unique key for this widget. If this\nis omitted, a key will be generated for the widget based on its\ncontent. Multiple widgets of the same type may not share the same\nkey.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this data_editor's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "pd.DataFrame, pd.Styler, pyarrow.Table, np.ndarray, list, set, tuple, or dict.",
          "is_generator": false,
          "description": "<p>The edited data. The edited data is returned in its original data type if\nit corresponds to any of the supported return types. All other data types\nare returned as a <tt class=\"docutils literal\">pd.DataFrame</tt>.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/data_editor.py#L448"
    },
    "streamlit.experimental_get_query_params": {
      "name": "experimental_get_query_params",
      "signature": "st.experimental_get_query_params()",
      "example": "<blockquote>\n<p>Let's say the user's web browser is at\n<cite>http://localhost:8501/?show_map=True&amp;selected=asia&amp;selected=america</cite>.\nThen, you can get the query parameters using the following:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.experimental_get_query_params()\n{&quot;show_map&quot;: [&quot;True&quot;], &quot;selected&quot;: [&quot;asia&quot;, &quot;america&quot;]}\n</pre>\n<p>Note that the values in the returned dict are <em>always</em> lists. This is\nbecause we internally use Python's urllib.parse.parse_qs(), which behaves\nthis way. And this behavior makes sense when you consider that every item\nin a query string is potentially a 1-element array.</p>\n</blockquote>\n",
      "description": "<p>Return the query parameters that is currently showing in the browser's URL bar.</p>\n",
      "args": [],
      "returns": [
        {
          "type_name": "dict",
          "is_generator": false,
          "description": "<p>The current query parameters as a dict. &quot;Query parameters&quot; are the part of the URL that comes\nafter the first &quot;?&quot;.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/commands/query_params.py#L29"
    },
    "streamlit.experimental_memo": {
      "name": "experimental_memo",
      "signature": "st.experimental_memo(func=None, *, ttl, max_entries, show_spinner, persist, experimental_allow_widgets)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n\nd1 = fetch_and_clean_data(DATA_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\nd2 = fetch_and_clean_data(DATA_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value. This means that now the data in d1 is the same as in d2.\n\nd3 = fetch_and_clean_data(DATA_URL_2)\n# This is a different URL, so the function executes.\n</pre>\n<p>To set the <tt class=\"docutils literal\">persist</tt> parameter, use this command as follows:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data(persist=&quot;disk&quot;)\ndef fetch_and_clean_data(url):\n    # Fetch data from URL here, and then clean it up.\n    return data\n</pre>\n<p>By default, all parameters to a cached function must be hashable.\nAny parameter whose name begins with <tt class=\"docutils literal\">_</tt> will not be hashed. You can use\nthis as an &quot;escape hatch&quot; for parameters that are not hashable:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(_db_connection, num_rows):\n    # Fetch data from _db_connection here, and then clean it up.\n    return data\n\nconnection = make_database_connection()\nd1 = fetch_and_clean_data(connection, num_rows=10)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\nanother_connection = make_database_connection()\nd2 = fetch_and_clean_data(another_connection, num_rows=10)\n# Does not execute the function. Instead, returns its previously computed\n# value - even though the _database_connection parameter was different\n# in both calls.\n</pre>\n<p>A cached function's cache can be procedurally cleared:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_data\ndef fetch_and_clean_data(_db_connection, num_rows):\n    # Fetch data from _db_connection here, and then clean it up.\n    return data\n\nfetch_and_clean_data.clear()\n# Clear all cached entries for this function.\n</pre>\n</blockquote>\n",
      "description": "<p>Decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).</p>\n<p>Cached objects are stored in &quot;pickled&quot; form, which means that the return\nvalue of a cached function must be pickleable. Each caller of the cached\nfunction gets its own copy of the cached data.</p>\n<p>You can clear a function's cache with <tt class=\"docutils literal\">func.clear()</tt> or clear the entire\ncache with <tt class=\"docutils literal\">st.cache_data.clear()</tt>.</p>\n<p>To cache global resources, use <tt class=\"docutils literal\">st.cache_resource</tt> instead. Learn more\nabout caching at <a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/caching\">https://docs.streamlit.io/library/advanced-features/caching</a>.</p>\n",
      "args": [
        {
          "name": "func",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>The function to cache. Streamlit hashes the function's source code.</p>\n",
          "default": null
        },
        {
          "name": "ttl",
          "type_name": "float or timedelta or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.\nNote that ttl is incompatible with <tt class=\"docutils literal\"><span class=\"pre\">persist=&quot;disk&quot;</span></tt> - <tt class=\"docutils literal\">ttl</tt> will be\nignored if <tt class=\"docutils literal\">persist</tt> is specified.</p>\n",
          "default": "None."
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "show_spinner",
          "type_name": "boolean or string",
          "is_optional": false,
          "description": "<p>Enable the spinner. Default is True to show a spinner when there is\na &quot;cache miss&quot; and the cached data is being created. If string,\nvalue of show_spinner param will be used for spinner text.</p>\n",
          "default": "True"
        },
        {
          "name": "persist",
          "type_name": "str or boolean or None",
          "is_optional": false,
          "description": "<p>Optional location to persist cached data to. Passing &quot;disk&quot; (or True)\nwill persist the cached data to the local disk. None (or False) will disable\npersistence. The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "experimental_allow_widgets",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Allow widgets to be used in the cached function. Defaults to False.\nSupport for widgets in cached functions is currently experimental.\nSetting this parameter to True may lead to excessive memory use since the\nwidget value is treated as an additional input parameter to the cache.\nWe may remove support for this option at any time without notice.</p>\n",
          "default": "False."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/caching/cache_data_api.py#L378"
    },
    "streamlit.experimental_rerun": {
      "name": "experimental_rerun",
      "signature": "st.experimental_rerun()",
      "description": "<p>Rerun the script immediately.</p>\n<p>When <cite>st.experimental_rerun()</cite> is called, the script is halted - no\nmore statements will be run, and the script will be queued to re-run\nfrom the top.</p>\n<p>If this function is called outside of Streamlit, it will raise an\nException.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/commands/execution_control.py#L46"
    },
    "streamlit.experimental_set_query_params": {
      "name": "experimental_set_query_params",
      "signature": "st.experimental_set_query_params(**query_params)",
      "example": "<blockquote>\n<p>To point the user's web browser to something like\n&quot;<a class=\"reference external\" href=\"http://localhost:8501/?show_map=True&amp;selected=asia&amp;selected=america\">http://localhost:8501/?show_map=True&amp;selected=asia&amp;selected=america</a>&quot;,\nyou would do the following:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.experimental_set_query_params(\n    show_map=True,\n    selected=[&quot;asia&quot;, &quot;america&quot;],\n)\n</pre>\n</blockquote>\n",
      "description": "<p>Set the query parameters that are shown in the browser's URL bar.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Query param <cite>embed</cite> cannot be set using this method.</p>\n</div>\n",
      "args": [
        {
          "name": "**query_params",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>The query parameters to set, as key-value pairs.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/commands/query_params.py#L65"
    },
    "streamlit.experimental_show": {
      "name": "experimental_show",
      "signature": "st.experimental_show(*args)",
      "notes": "<blockquote>\n<p>This is an experimental feature with usage limitations:</p>\n<ul class=\"simple\">\n<li>The method must be called with the name <cite>show</cite>.</li>\n<li>Must be called in one line of code, and only once per line.</li>\n<li><dl class=\"first docutils\">\n<dt>When passing multiple arguments the inclusion of <cite>,</cite> or <cite>)</cite> in a string</dt>\n<dd>argument may cause an error.</dd>\n</dl>\n</li>\n</ul>\n</blockquote>\n",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\n\ndataframe = pd.DataFrame({\n    'first column': [1, 2, 3, 4],\n    'second column': [10, 20, 30, 40],\n})\nst.experimental_show(dataframe)\n</pre>\n</blockquote>\n",
      "description": "<p>Write arguments and <em>argument names</em> to your app for debugging purposes.</p>\n<p>Show() has similar properties to write():</p>\n<blockquote>\n<ol class=\"arabic simple\">\n<li>You can pass in multiple arguments, all of which will be debugged.</li>\n<li>It returns None, so it's &quot;slot&quot; in the app cannot be reused.</li>\n</ol>\n</blockquote>\n<p>Note: This is an experimental feature. See\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/prerelease#experimental\">https://docs.streamlit.io/library/advanced-features/prerelease#experimental</a> for more information.</p>\n",
      "args": [
        {
          "name": "*args",
          "type_name": "any",
          "is_optional": false,
          "description": "<p>One or many objects to debug in the App.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/show.py#L23"
    },
    "streamlit.experimental_singleton": {
      "name": "experimental_singleton",
      "signature": "st.experimental_singleton(func, *, ttl, max_entries, show_spinner, validate, experimental_allow_widgets)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(url):\n    # Create a database session object that points to the URL.\n    return session\n\ns1 = get_database_session(SESSION_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\ns2 = get_database_session(SESSION_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value. This means that now the connection object in s1 is the same as in s2.\n\ns3 = get_database_session(SESSION_URL_2)\n# This is a different URL, so the function executes.\n</pre>\n<p>By default, all parameters to a cache_resource function must be hashable.\nAny parameter whose name begins with <tt class=\"docutils literal\">_</tt> will not be hashed. You can use\nthis as an &quot;escape hatch&quot; for parameters that are not hashable:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(_sessionmaker, url):\n    # Create a database connection object that points to the URL.\n    return connection\n\ns1 = get_database_session(create_sessionmaker(), DATA_URL_1)\n# Actually executes the function, since this is the first time it was\n# encountered.\n\ns2 = get_database_session(create_sessionmaker(), DATA_URL_1)\n# Does not execute the function. Instead, returns its previously computed\n# value - even though the _sessionmaker parameter was different\n# in both calls.\n</pre>\n<p>A cache_resource function's cache can be procedurally cleared:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\n&#64;st.cache_resource\ndef get_database_session(_sessionmaker, url):\n    # Create a database connection object that points to the URL.\n    return connection\n\nget_database_session.clear()\n# Clear all cached entries for this function.\n</pre>\n</blockquote>\n",
      "description": "<p>Decorator to cache functions that return global resources (e.g. database connections, ML models).</p>\n<p>Cached objects are shared across all users, sessions, and reruns. They\nmust be thread-safe because they can be accessed from multiple threads\nconcurrently. If thread safety is an issue, consider using <tt class=\"docutils literal\">st.session_state</tt>\nto store resources per session instead.</p>\n<p>You can clear a function's cache with <tt class=\"docutils literal\">func.clear()</tt> or clear the entire\ncache with <tt class=\"docutils literal\">st.cache_resource.clear()</tt>.</p>\n<p>To cache data, use <tt class=\"docutils literal\">st.cache_data</tt> instead. Learn more about caching at\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/caching\">https://docs.streamlit.io/library/advanced-features/caching</a>.</p>\n",
      "args": [
        {
          "name": "func",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>The function that creates the cached resource. Streamlit hashes the\nfunction's source code.</p>\n",
          "default": null
        },
        {
          "name": "ttl",
          "type_name": "float or timedelta or None",
          "is_optional": false,
          "description": "<p>The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "max_entries",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.</p>\n",
          "default": "None."
        },
        {
          "name": "show_spinner",
          "type_name": "boolean or string",
          "is_optional": false,
          "description": "<p>Enable the spinner. Default is True to show a spinner when there is\na &quot;cache miss&quot; and the cached resource is being created. If string,\nvalue of show_spinner param will be used for spinner text.</p>\n",
          "default": "True"
        },
        {
          "name": "validate",
          "type_name": "callable or None",
          "is_optional": false,
          "description": "<p>An optional validation function for cached data. <tt class=\"docutils literal\">validate</tt> is called\neach time the cached value is accessed. It receives the cached value as\nits only parameter and it must return a boolean. If <tt class=\"docutils literal\">validate</tt> returns\nFalse, the current cached value is discarded, and the decorated function\nis called to compute a new value. This is useful e.g. to check the\nhealth of database connections.</p>\n",
          "default": null
        },
        {
          "name": "experimental_allow_widgets",
          "type_name": "boolean",
          "is_optional": false,
          "description": "<p>Allow widgets to be used in the cached function. Defaults to False.\nSupport for widgets in cached functions is currently experimental.\nSetting this parameter to True may lead to excessive memory use since the\nwidget value is treated as an additional input parameter to the cache.\nWe may remove support for this option at any time without notice.</p>\n",
          "default": "False."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/runtime/caching/cache_resource_api.py#L258"
    },
    "streamlit.file_uploader": {
      "name": "file_uploader",
      "signature": "st.file_uploader(label, type=None, accept_multiple_files=False, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "examples": "<blockquote>\n<p>Insert a file uploader that accepts a single file at a time:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nfrom io import StringIO\n\nuploaded_file = st.file_uploader(&quot;Choose a file&quot;)\nif uploaded_file is not None:\n    # To read file as bytes:\n    bytes_data = uploaded_file.getvalue()\n    st.write(bytes_data)\n\n    # To convert to a string based IO:\n    stringio = StringIO(uploaded_file.getvalue().decode(&quot;utf-8&quot;))\n    st.write(stringio)\n\n    # To read file as string:\n    string_data = stringio.read()\n    st.write(string_data)\n\n    # Can be used wherever a &quot;file-like&quot; object is accepted:\n    dataframe = pd.read_csv(uploaded_file)\n    st.write(dataframe)\n</pre>\n<p>Insert a file uploader that accepts multiple files at a time:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nuploaded_files = st.file_uploader(&quot;Choose a CSV file&quot;, accept_multiple_files=True)\nfor uploaded_file in uploaded_files:\n    bytes_data = uploaded_file.read()\n    st.write(&quot;filename:&quot;, uploaded_file.name)\n    st.write(bytes_data)\n</pre>\n\n                <Cloud name=\"doc-file-uploader\" path=\"\" query=\"\" stylePlaceholder=\"height: 375px\" />\n            </blockquote>\n",
      "description": "<p>Display a file uploader widget.</p>\n<p>By default, uploaded files are limited to 200MB. You can configure\nthis using the <cite>server.maxUploadSize</cite> config option. For more info\non how to set config options, see\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/configuration#set-configuration-options\">https://docs.streamlit.io/library/advanced-features/configuration#set-configuration-options</a></p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this file uploader is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "type",
          "type_name": "str or list of str or None",
          "is_optional": false,
          "description": "<p>Array of allowed extensions. ['png', 'jpg']\nThe default is None, which means all extensions are allowed.</p>\n",
          "default": "None"
        },
        {
          "name": "accept_multiple_files",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, allows the user to upload multiple files at the same time,\nin which case the return value will be a list of files.\nDefault: False</p>\n",
          "default": "False"
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A tooltip that gets displayed next to the file uploader.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this file_uploader's value\nchanges.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the file uploader if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "None or UploadedFile or list of UploadedFile",
          "is_generator": false,
          "description": "<ul class=\"simple\">\n<li>If accept_multiple_files is False, returns either None or\nan UploadedFile object.</li>\n<li>If accept_multiple_files is True, returns a list with the\nuploaded files as UploadedFile objects. If no files were\nuploaded, returns an empty list.</li>\n</ul>\n<p>The UploadedFile class is a subclass of BytesIO, and therefore\nit is &quot;file-like&quot;. This means you can pass them anywhere where\na file is expected.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/file_uploader.py#L205"
    },
    "streamlit.form": {
      "name": "form",
      "signature": "st.form(key, clear_on_submit=False)",
      "examples": "<blockquote>\n<p>Inserting elements using &quot;with&quot; notation:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nwith st.form(&quot;my_form&quot;):\n   st.write(&quot;Inside the form&quot;)\n   slider_val = st.slider(&quot;Form slider&quot;)\n   checkbox_val = st.checkbox(&quot;Form checkbox&quot;)\n\n   # Every form must have a submit button.\n   submitted = st.form_submit_button(&quot;Submit&quot;)\n   if submitted:\n       st.write(&quot;slider&quot;, slider_val, &quot;checkbox&quot;, checkbox_val)\n\nst.write(&quot;Outside the form&quot;)\n</pre>\n<p>Inserting elements out of order:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nform = st.form(&quot;my_form&quot;)\nform.slider(&quot;Inside the form&quot;)\nst.slider(&quot;Outside the form&quot;)\n\n# Now add a submit button to the form:\nform.form_submit_button(&quot;Submit&quot;)\n</pre>\n</blockquote>\n",
      "description": "<p>Create a form that batches elements together with a &quot;Submit&quot; button.</p>\n<p>A form is a container that visually groups other elements and\nwidgets together, and contains a Submit button. When the form's\nSubmit button is pressed, all widget values inside the form will be\nsent to Streamlit in a batch.</p>\n<p>To add elements to a form object, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the form. See\nexamples below.</p>\n<p>Forms have a few constraints:</p>\n<ul class=\"simple\">\n<li>Every form must contain a <tt class=\"docutils literal\">st.form_submit_button</tt>.</li>\n<li><tt class=\"docutils literal\">st.button</tt> and <tt class=\"docutils literal\">st.download_button</tt> cannot be added to a form.</li>\n<li>Forms can appear anywhere in your app (sidebar, columns, etc),\nbut they cannot be embedded inside other forms.</li>\n</ul>\n<p>For more information about forms, check out our\n<a class=\"reference external\" href=\"https://blog.streamlit.io/introducing-submit-button-and-forms/\">blog post</a>.</p>\n",
      "args": [
        {
          "name": "key",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A string that identifies the form. Each form must have its own\nkey. (This key is not displayed to the user in the interface.)</p>\n",
          "default": null
        },
        {
          "name": "clear_on_submit",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, all widgets inside the form will be reset to their default\nvalues after the user presses the Submit button. Defaults to False.\n(Note that Custom Components are unaffected by this flag, and\nwill not be reset to their defaults on form submission.)</p>\n",
          "default": "values"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/form.py#L118"
    },
    "streamlit.form_submit_button": {
      "name": "form_submit_button",
      "signature": "st.form_submit_button(label=\"Submit\", help=None, on_click=None, args=None, kwargs=None, *, type=\"secondary\", disabled=False, use_container_width=False)",
      "description": "<p>Display a form submit button.</p>\n<p>When this button is clicked, all widget values inside the form will be\nsent to Streamlit in a batch.</p>\n<p>Every form must have a form_submit_button. A form_submit_button\ncannot exist outside a form.</p>\n<p>For more information about forms, check out our\n<a class=\"reference external\" href=\"https://blog.streamlit.io/introducing-submit-button-and-forms/\">blog post</a>.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this button is for.\nDefaults to &quot;Submit&quot;.</p>\n",
          "default": "s"
        },
        {
          "name": "help",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>A tooltip that gets displayed when the button is hovered over.\nDefaults to None.</p>\n",
          "default": "None."
        },
        {
          "name": "on_click",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this button is clicked.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "type",
          "type_name": "\"secondary\" or \"primary\"",
          "is_optional": false,
          "description": "<p>An optional string that specifies the button type. Can be &quot;primary&quot; for a\nbutton with additional emphasis or &quot;secondary&quot; for a normal button. This\nargument can only be supplied by keyword. Defaults to &quot;secondary&quot;.</p>\n",
          "default": "s"
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the button if set to True. The\ndefault is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which makes the button stretch its width to match the parent container.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "bool",
          "is_generator": false,
          "description": "<p>True if the button was clicked.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/form.py#L211"
    },
    "streamlit.get_option": {
      "name": "get_option",
      "signature": "st.get_option(key)",
      "description": "<p>Return the current value of a given Streamlit config option.</p>\n<p>Run <cite>streamlit config show</cite> in the terminal to see all available options.</p>\n",
      "args": [
        {
          "name": "key",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The config option key of the form &quot;section.optionName&quot;. To see all\navailable options, run <cite>streamlit config show</cite> on a terminal.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/config.py#L131"
    },
    "streamlit.graphviz_chart": {
      "name": "graphviz_chart",
      "signature": "st.graphviz_chart(figure_or_dot, use_container_width=False)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport graphviz\n\n# Create a graphlib graph object\ngraph = graphviz.Digraph()\ngraph.edge('run', 'intr')\ngraph.edge('intr', 'runbl')\ngraph.edge('runbl', 'run')\ngraph.edge('run', 'kernel')\ngraph.edge('kernel', 'zombie')\ngraph.edge('kernel', 'sleep')\ngraph.edge('kernel', 'runmem')\ngraph.edge('sleep', 'swap')\ngraph.edge('swap', 'runswap')\ngraph.edge('runswap', 'new')\ngraph.edge('runswap', 'runmem')\ngraph.edge('new', 'runmem')\ngraph.edge('sleep', 'runmem')\n\nst.graphviz_chart(graph)\n</pre>\n<p>Or you can render the chart from the graph using GraphViz's Dot\nlanguage:</p>\n<pre class=\"doctest-block\">\nst.graphviz_chart('''\n    digraph {\n        run -&gt; intr\n        intr -&gt; runbl\n        runbl -&gt; run\n        run -&gt; kernel\n        kernel -&gt; zombie\n        kernel -&gt; sleep\n        kernel -&gt; runmem\n        sleep -&gt; swap\n        swap -&gt; runswap\n        runswap -&gt; new\n        runswap -&gt; runmem\n        new -&gt; runmem\n        sleep -&gt; runmem\n    }\n''')\n</pre>\n\n                <Cloud name=\"doc-graphviz-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 600px\" />\n            </blockquote>\n",
      "description": "<p>Display a graph using the dagre-d3 library.</p>\n",
      "args": [
        {
          "name": "figure_or_dot",
          "type_name": "graphviz.dot.Graph, graphviz.dot.Digraph, str",
          "is_optional": false,
          "description": "<p>The Graphlib graph object or dot string to display</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over the figure's native <cite>width</cite> value.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/graphviz_chart.py#L39"
    },
    "streamlit.header": {
      "name": "header",
      "signature": "st.header(body, anchor=None, *, help=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.header('This is a header')\nst.header('A header with _italics_ :blue[colors] and emojis :sunglasses:')\n</pre>\n</blockquote>\n",
      "description": "<p>Display text in header formatting.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The text to display as Github-flavored Markdown. Syntax\ninformation can be found at: <a class=\"reference external\" href=\"https://github.github.com/gfm\">https://github.github.com/gfm</a>.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "anchor",
          "type_name": "str or False",
          "is_optional": false,
          "description": "<p>The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.\nIf False, the anchor is not shown in the UI.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the header.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/heading.py#L40"
    },
    "streamlit.help": {
      "name": "help",
      "signature": "st.help(obj=streamlit)",
      "example": "<blockquote>\n<p>Don't remember how to initialize a dataframe? Try this:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas\n\nst.help(pandas.DataFrame)\n</pre>\n\n                <Cloud name=\"doc-string\" path=\"\" query=\"\" stylePlaceholder=\"height: 700px\" />\n            <p>Want to quickly check what data type is output by a certain function?\nTry:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nx = my_poorly_documented_function()\nst.help(x)\n</pre>\n<p>Want to quickly inspect an object? No sweat:</p>\n<pre class=\"doctest-block\">\nclass Dog:\n  '''A typical dog.'''\n\n  def __init__(self, breed, color):\n    self.breed = breed\n    self.color = color\n\n  def bark(self):\n    return 'Woof!'\n\n\nfido = Dog('poodle', 'white')\n\nst.help(fido)\n</pre>\n\n                <Cloud name=\"doc-string1\" path=\"\" query=\"\" stylePlaceholder=\"height: 300px\" />\n            <p>And if you're using Magic, you can get help for functions, classes,\nand modules without even typing <tt class=\"docutils literal\">st.help</tt>:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas\n\n# Get help for Pandas read_csv:\npandas.read_csv\n\n# Get help for Streamlit itself:\nst\n</pre>\n\n                <Cloud name=\"doc-string2\" path=\"\" query=\"\" stylePlaceholder=\"height: 700px\" />\n            </blockquote>\n",
      "description": "<p>Display help and other information for a given object.</p>\n<p>Depending on the type of object that is passed in, this displays the\nobject's name, type, value, signature, docstring, and member variables,\nmethods \u2014 as well as the values/docstring of members and methods.</p>\n",
      "args": [
        {
          "name": "obj",
          "type_name": "any",
          "is_optional": false,
          "description": "<p>The object whose information should be displayed. If left\nunspecified, this call will display help for Streamlit itself.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/doc_string.py#L49"
    },
    "streamlit.image": {
      "name": "image",
      "signature": "st.image(image, caption=None, width=None, use_column_width=None, clamp=False, channels=\"RGB\", output_format=\"auto\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nfrom PIL import Image\n\nimage = Image.open('sunrise.jpg')\n\nst.image(image, caption='Sunrise by the mountains')\n</pre>\n\n                <Cloud name=\"doc-image\" path=\"\" query=\"\" stylePlaceholder=\"height: 710px\" />\n            </blockquote>\n",
      "description": "<p>Display an image or list of images.</p>\n",
      "args": [
        {
          "name": "image",
          "type_name": "numpy.ndarray, [numpy.ndarray], BytesIO, str, or [str]",
          "is_optional": false,
          "description": "<p>Monochrome image of shape (w,h) or (w,h,1)\nOR a color image of shape (w,h,3)\nOR an RGBA image of shape (w,h,4)\nOR a URL to fetch the image from\nOR a path of a local image file\nOR an SVG XML string like <cite>&lt;svg xmlns=...&lt;/svg&gt;</cite>\nOR a list of one of the above, to display multiple images.</p>\n",
          "default": null
        },
        {
          "name": "caption",
          "type_name": "str or list of str",
          "is_optional": false,
          "description": "<p>Image caption. If displaying multiple images, caption should be a\nlist of captions (one for each image).</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Image width. None means use the image width,\nbut do not exceed the width of the column.\nShould be set for SVG images, as they have no default image width.</p>\n",
          "default": "image"
        },
        {
          "name": "use_column_width",
          "type_name": "'auto' or 'always' or 'never' or bool",
          "is_optional": false,
          "description": "<p>If 'auto', set the image's width to its natural size,\nbut do not exceed the width of the column.\nIf 'always' or True, set the image's width to the column width.\nIf 'never' or False, set the image's width to its natural size.\nNote: if set, <cite>use_column_width</cite> takes precedence over the <cite>width</cite> parameter.</p>\n",
          "default": null
        },
        {
          "name": "clamp",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>Clamp image pixel values to a valid range ([0-255] per channel).\nThis is only meaningful for byte array images; the parameter is\nignored for image URLs. If this is not set, and an image has an\nout-of-range value, an error will be thrown.</p>\n",
          "default": null
        },
        {
          "name": "channels",
          "type_name": "'RGB' or 'BGR'",
          "is_optional": false,
          "description": "<p>If image is an nd.array, this parameter denotes the format used to\nrepresent color information. Defaults to 'RGB', meaning\n<cite>image[:, :, 0]</cite> is the red channel, <cite>image[:, :, 1]</cite> is green, and\n<cite>image[:, :, 2]</cite> is blue. For images coming from libraries like\nOpenCV you should set this to 'BGR', instead.</p>\n",
          "default": "s"
        },
        {
          "name": "output_format",
          "type_name": "'JPEG', 'PNG', or 'auto'",
          "is_optional": false,
          "description": "<p>This parameter specifies the format to use when transferring the\nimage data. Photos should use the JPEG format for lossy compression\nwhile diagrams should use the PNG format for lossless compression.\nDefaults to 'auto' which identifies the compression type based\non the type and format of the image argument.</p>\n",
          "default": "s"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/image.py#L88"
    },
    "streamlit.info": {
      "name": "info",
      "signature": "st.info(body, *, icon=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.info('This is a purely informational message', icon=&quot;\u2139\ufe0f&quot;)\n</pre>\n</blockquote>\n",
      "description": "<p>Display an informational message.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The info text to display.</p>\n",
          "default": null
        },
        {
          "name": "icon",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>An optional, keyword-only argument that specifies an emoji to use as\nthe icon for the alert. Shortcodes are not allowed, please use a\nsingle character instead. E.g. &quot;\ud83d\udea8&quot;, &quot;\ud83d\udd25&quot;, &quot;\ud83e\udd16&quot;, etc.\nDefaults to None, which means no icon is displayed.</p>\n",
          "default": "None"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/alert.py#L103"
    },
    "streamlit.json": {
      "name": "json",
      "signature": "st.json(body, *, expanded=True)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.json({\n    'foo': 'bar',\n    'baz': 'boz',\n    'stuff': [\n        'stuff 1',\n        'stuff 2',\n        'stuff 3',\n        'stuff 5',\n    ],\n})\n</pre>\n\n                <Cloud name=\"doc-json\" path=\"\" query=\"\" stylePlaceholder=\"height: 385px\" />\n            </blockquote>\n",
      "description": "<p>Display object or string as a pretty-printed JSON string.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "object or str",
          "is_optional": false,
          "description": "<p>The object to print as JSON. All referenced objects should be\nserializable to JSON as well. If object is a string, we assume it\ncontains serialized JSON.</p>\n",
          "default": null
        },
        {
          "name": "expanded",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean that allows the user to set whether the initial\nstate of this json element should be expanded. Defaults to True.\nThis argument can only be supplied by keyword.</p>\n",
          "default": "True."
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/json.py#L35"
    },
    "streamlit.latex": {
      "name": "latex",
      "signature": "st.latex(body, *, help=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.latex(r'''\n    a + ar + a r^2 + a r^3 + \\cdots + a r^{n-1} =\n    \\sum_{k=0}^{n-1} ar^k =\n    a \\left(\\frac{1-r^{n}}{1-r}\\right)\n    ''')\n</pre>\n</blockquote>\n",
      "description": "<p>Display mathematical expressions formatted as LaTeX.</p>\n<p>Supported LaTeX functions are listed at\n<a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str or SymPy expression",
          "is_optional": false,
          "description": "<p>The string or SymPy expression to display as LaTeX. If str, it's\na good idea to use raw Python strings since LaTeX uses backslashes\na lot.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the LaTeX expression.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/markdown.py#L196"
    },
    "streamlit.line_chart": {
      "name": "line_chart",
      "signature": "st.line_chart(data=None, *, x=None, y=None, width=0, height=0, use_container_width=True)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nchart_data = pd.DataFrame(\n    np.random.randn(20, 3),\n    columns=['a', 'b', 'c'])\n\nst.line_chart(chart_data)\n</pre>\n\n                <Cloud name=\"doc-line-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 400px\" />\n            </blockquote>\n",
      "description": "<p>Display a line chart.</p>\n<p>This is syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many &quot;just plot\nthis&quot; scenarios, while being less customizable.</p>\n<p>If st.line_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, dict or None",
          "is_optional": false,
          "description": "<p>Data to be plotted.\nPyarrow tables are not supported by Streamlit's legacy DataFrame serialization\n(i.e. with <cite>config.dataFrameSerialization = &quot;legacy&quot;</cite>).\nTo use pyarrow tables, please enable pyarrow by changing the config setting,\n<cite>config.dataFrameSerialization = &quot;arrow&quot;</cite>.</p>\n",
          "default": null
        },
        {
          "name": "x",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>Column name to use for the x-axis. If None, uses the data index for the x-axis.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "y",
          "type_name": "str, sequence of str, or None",
          "is_optional": false,
          "description": "<p>Column name(s) to use for the y-axis. If a sequence of strings, draws several series\non the same chart by melting your wide-format table into a long-format table behind\nthe scenes. If None, draws the data of all remaining columns as data series.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "width",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart width in pixels. If 0, selects the width automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The chart height in pixels. If 0, selects the height automatically.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over the width argument.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L160"
    },
    "streamlit.map": {
      "name": "map",
      "signature": "st.map(data=None, zoom=None, use_container_width=True)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],\n    columns=['lat', 'lon'])\n\nst.map(df)\n</pre>\n\n                <Cloud name=\"doc-map\" path=\"\" query=\"\" stylePlaceholder=\"height: 650px\" />\n            </blockquote>\n",
      "description": "<p>Display a map with points on it.</p>\n<p>This is a wrapper around <tt class=\"docutils literal\">st.pydeck_chart</tt> to quickly create\nscatterplot charts on top of a map, with auto-centering and auto-zoom.</p>\n<p>When using this command, Mapbox provides the map tiles to render map\ncontent. Note that Mapbox is a third-party product, the use of which is\ngoverned by Mapbox's Terms of Use.</p>\n<p>Mapbox requires users to register and provide a token before users can\nrequest map tiles. Currently, Streamlit provides this token for you, but\nthis could change at any time. We strongly recommend all users create and\nuse their own personal Mapbox token to avoid any disruptions to their\nexperience. You can do this with the <tt class=\"docutils literal\">mapbox.token</tt> config option.</p>\n<p>To get a token for yourself, create an account at <a class=\"reference external\" href=\"https://mapbox.com\">https://mapbox.com</a>.\nFor more info on how to set config options, see\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/configuration\">https://docs.streamlit.io/library/advanced-features/configuration</a></p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, dict, or None",
          "is_optional": false,
          "description": "<p>The data to be plotted. Must have two columns:</p>\n<ul class=\"simple\">\n<li>latitude called 'lat', 'latitude', 'LAT', 'LATITUDE'</li>\n<li>longitude called 'lon', 'longitude', 'LON', 'LONGITUDE'.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "zoom",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>Zoom level as specified in\n<a class=\"reference external\" href=\"https://wiki.openstreetmap.org/wiki/Zoom_levels\">https://wiki.openstreetmap.org/wiki/Zoom_levels</a></p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/map.py#L76"
    },
    "streamlit.markdown": {
      "name": "markdown",
      "signature": "st.markdown(body, unsafe_allow_html=False, *, help=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.markdown('Streamlit is **_really_ cool**.')\nst.markdown(\u201dThis text is :red[colored red], and this is **:blue[colored]** and bold.\u201d)\nst.markdown(&quot;:green[$\\sqrt{x^2+y^2}=1$] is a Pythagorean identity. :pencil:&quot;)\n</pre>\n</blockquote>\n",
      "description": "<p>Display string formatted as Markdown.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The string to display as Github-flavored Markdown. Syntax\ninformation can be found at: <a class=\"reference external\" href=\"https://github.github.com/gfm\">https://github.github.com/gfm</a>.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "unsafe_allow_html",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>By default, any HTML tags found in the body will be escaped and\ntherefore treated as pure text. This behavior may be turned off by\nsetting this argument to True.</p>\n<p>That said, we <em>strongly advise against it</em>. It is hard to write\nsecure HTML, so by using this argument you may be compromising your\nusers' security. For more information, see:</p>\n<p><a class=\"reference external\" href=\"https://github.com/streamlit/streamlit/issues/152\">https://github.com/streamlit/streamlit/issues/152</a></p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the Markdown.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/markdown.py#L31"
    },
    "streamlit.metric": {
      "name": "metric",
      "signature": "st.metric(label, value, delta=None, delta_color=\"normal\", help=None, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.metric(label=&quot;Temperature&quot;, value=&quot;70 \u00b0F&quot;, delta=&quot;1.2 \u00b0F&quot;)\n</pre>\n\n                <Cloud name=\"doc-metric-example1\" path=\"\" query=\"\" stylePlaceholder=\"height: 210px\" />\n            <p><tt class=\"docutils literal\">st.metric</tt> looks especially nice in combination with <tt class=\"docutils literal\">st.columns</tt>:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(&quot;Temperature&quot;, &quot;70 \u00b0F&quot;, &quot;1.2 \u00b0F&quot;)\ncol2.metric(&quot;Wind&quot;, &quot;9 mph&quot;, &quot;-8%&quot;)\ncol3.metric(&quot;Humidity&quot;, &quot;86%&quot;, &quot;4%&quot;)\n</pre>\n\n                <Cloud name=\"doc-metric-example2\" path=\"\" query=\"\" stylePlaceholder=\"height: 210px\" />\n            <p>The delta indicator color can also be inverted or turned off:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.metric(label=&quot;Gas price&quot;, value=4, delta=-0.5,\n    delta_color=&quot;inverse&quot;)\n\nst.metric(label=&quot;Active developers&quot;, value=123, delta=123,\n    delta_color=&quot;off&quot;)\n</pre>\n\n                <Cloud name=\"doc-metric-example3\" path=\"\" query=\"\" stylePlaceholder=\"height: 320px\" />\n            </blockquote>\n",
      "description": "<p>Display a metric in big bold font, with an optional indicator of how the metric changed.</p>\n<p>Tip: If you want to display a large number, it may be a good idea to\nshorten it using packages like <a class=\"reference external\" href=\"https://github.com/azaitsev/millify\">millify</a>\nor <a class=\"reference external\" href=\"https://github.com/davidsa03/numerize\">numerize</a>. E.g. <tt class=\"docutils literal\">1234</tt> can be\ndisplayed as <tt class=\"docutils literal\">1.2k</tt> using <tt class=\"docutils literal\"><span class=\"pre\">st.metric(&quot;Short</span> number&quot;, millify(1234))</tt>.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The header or title for the metric. The label can optionally contain\nMarkdown and supports the following elements: Bold, Italics,\nStrikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "int, float, str, or None",
          "is_optional": false,
          "description": "<p>Value of the metric. None is rendered as a long dash.</p>\n",
          "default": null
        },
        {
          "name": "delta",
          "type_name": "int, float, str, or None",
          "is_optional": false,
          "description": "<p>Indicator of how the metric changed, rendered with an arrow below\nthe metric. If delta is negative (int/float) or starts with a minus\nsign (str), the arrow points down and the text is red; else the\narrow points up and the text is green. If None (default), no delta\nindicator is shown.</p>\n",
          "default": null
        },
        {
          "name": "delta_color",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>If &quot;normal&quot; (default), the delta indicator is shown as described\nabove. If &quot;inverse&quot;, it is red when positive and green when\nnegative. This is useful when a negative change is considered\ngood, e.g. if cost decreased. If &quot;off&quot;, delta is  shown in gray\nregardless of its value.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the metric label.</p>\n",
          "default": null
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/metric.py#L46"
    },
    "streamlit.multiselect": {
      "name": "multiselect",
      "signature": "st.multiselect(label, options, default=None, format_func=special_internal_function, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\", max_selections=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\noptions = st.multiselect(\n    'What are your favorite colors',\n    ['Green', 'Yellow', 'Red', 'Blue'],\n    ['Yellow', 'Red'])\n\nst.write('You selected:', options)\n</pre>\n\n                <Cloud name=\"doc-multiselect\" path=\"\" query=\"\" stylePlaceholder=\"height: 420px\" />\n            </blockquote>\n",
      "description": "<p>Display a multiselect widget.</p>\n<p>The multiselect widget starts as empty.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this select widget is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "options",
          "type_name": "Sequence[V], numpy.ndarray, pandas.Series, pandas.DataFrame, or pandas.Index",
          "is_optional": false,
          "description": "<p>Labels for the select options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.</p>\n",
          "default": "."
        },
        {
          "name": "default",
          "type_name": "[V], V, or None",
          "is_optional": false,
          "description": "<p>List of default values. Can also be a single value.</p>\n",
          "default": "values."
        },
        {
          "name": "format_func",
          "type_name": "function",
          "is_optional": false,
          "description": "<p>Function to modify the display of selectbox options. It receives\nthe raw option as an argument and should output the label to be\nshown for that option. This has no impact on the return value of\nthe multiselect.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the multiselect.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this multiselect's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the multiselect widget if set\nto True. The default is False. This argument can only be supplied\nby keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        },
        {
          "name": "max_selections",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The max selections that can be selected at a time.\nThis argument can only be supplied by keyword.</p>\n",
          "default": null
        }
      ],
      "returns": [
        {
          "type_name": "list",
          "is_generator": false,
          "description": "<p>A list with the selected options</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/multiselect.py#L145"
    },
    "streamlit.number_input": {
      "name": "number_input",
      "signature": "st.number_input(label, min_value=None, max_value=None, value=<streamlit.runtime.state.widgets.NoValue object at 0x7fd9b3405160>, step=None, format=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nnumber = st.number_input('Insert a number')\nst.write('The current number is ', number)\n</pre>\n\n                <Cloud name=\"doc-number-input\" path=\"\" query=\"\" stylePlaceholder=\"height: 260px\" />\n            </blockquote>\n",
      "description": "<p>Display a numeric input widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "min_value",
          "type_name": "int or float or None",
          "is_optional": false,
          "description": "<p>The minimum permitted value.\nIf None, there will be no minimum.</p>\n",
          "default": null
        },
        {
          "name": "max_value",
          "type_name": "int or float or None",
          "is_optional": false,
          "description": "<p>The maximum permitted value.\nIf None, there will be no maximum.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "int or float or None",
          "is_optional": false,
          "description": "<p>The value of this widget when it first renders.\nDefaults to min_value, or 0.0 if min_value is None</p>\n",
          "default": "min_value"
        },
        {
          "name": "step",
          "type_name": "int or float or None",
          "is_optional": false,
          "description": "<p>The stepping interval.\nDefaults to 1 if the value is an int, 0.01 otherwise.\nIf the value is not specified, the format parameter will be used.</p>\n",
          "default": "1"
        },
        {
          "name": "format",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>A printf-style format string controlling how the interface should\ndisplay numbers. Output must be purely numeric. This does not impact\nthe return value. Valid formatters: %d %e %f %g %i %u</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the input.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this number_input's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the number input if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "int or float",
          "is_generator": false,
          "description": "<p>The current value of the numeric input widget. The return type\nwill match the data type of the value parameter.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/number_input.py#L66"
    },
    "streamlit.plotly_chart": {
      "name": "plotly_chart",
      "signature": "st.plotly_chart(figure_or_data, use_container_width=False, sharing=\"streamlit\", theme=\"streamlit\", **kwargs)",
      "example": "<blockquote>\n<p>The example below comes straight from the examples at\n<a class=\"reference external\" href=\"https://plot.ly/python\">https://plot.ly/python</a>:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport numpy as np\nimport plotly.figure_factory as ff\n\n# Add histogram data\nx1 = np.random.randn(200) - 2\nx2 = np.random.randn(200)\nx3 = np.random.randn(200) + 2\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['Group 1', 'Group 2', 'Group 3']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(\n        hist_data, group_labels, bin_size=[.1, .25, .5])\n\n# Plot!\nst.plotly_chart(fig, use_container_width=True)\n</pre>\n\n                <Cloud name=\"doc-plotly-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 400px\" />\n            </blockquote>\n",
      "description": "<p>Display an interactive Plotly chart.</p>\n<p>Plotly is a charting library for Python. The arguments to this function\nclosely follow the ones for Plotly's <cite>plot()</cite> function. You can find\nmore about Plotly at <a class=\"reference external\" href=\"https://plot.ly/python\">https://plot.ly/python</a>.</p>\n<p>To show Plotly charts in Streamlit, call <cite>st.plotly_chart</cite> wherever you\nwould call Plotly's <cite>py.plot</cite> or <cite>py.iplot</cite>.</p>\n",
      "args": [
        {
          "name": "figure_or_data",
          "type_name": "plotly.graph_objs.Figure, plotly.graph_objs.Data,",
          "is_optional": false,
          "description": "<p>dict/list of plotly.graph_objs.Figure/Data</p>\n<p>See <a class=\"reference external\" href=\"https://plot.ly/python/\">https://plot.ly/python/</a> for examples of graph descriptions.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. This takes\nprecedence over the figure's native <cite>width</cite> value.</p>\n",
          "default": null
        },
        {
          "name": "sharing",
          "type_name": "{'streamlit', 'private', 'secret', 'public'}",
          "is_optional": false,
          "description": "<p>Use 'streamlit' to insert the plot and all its dependencies\ndirectly in the Streamlit app using plotly's offline mode (default).\nUse any other sharing mode to send the chart to Plotly chart studio, which\nrequires an account. See <a class=\"reference external\" href=\"https://plot.ly/python/chart-studio/\">https://plot.ly/python/chart-studio/</a> for more information.</p>\n",
          "default": null
        },
        {
          "name": "theme",
          "type_name": "\"streamlit\" or None",
          "is_optional": false,
          "description": "<p>The theme of the chart. Currently, we only support &quot;streamlit&quot; for the Streamlit\ndefined design or None to fallback to the default behavior of the library.</p>\n",
          "default": "behavior"
        },
        {
          "name": "**kwargs",
          "type_name": null,
          "is_optional": null,
          "description": "<p>Any argument accepted by Plotly's <cite>plot()</cite> function.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/plotly_chart.py#L81"
    },
    "streamlit.progress": {
      "name": "progress",
      "signature": "st.progress(value, text=None)",
      "example": "<blockquote>\n<p>Here is an example of a progress bar increasing over time:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport time\n\nprogress_text = &quot;Operation in progress. Please wait.&quot;\nmy_bar = st.progress(0, text=progress_text)\n\nfor percent_complete in range(100):\n    time.sleep(0.1)\n    my_bar.progress(percent_complete + 1, text=progress_text)\n</pre>\n</blockquote>\n",
      "description": "<p>Display a progress bar.</p>\n",
      "args": [
        {
          "name": "value",
          "type_name": "int or float",
          "is_optional": false,
          "description": "<p>0 &lt;= value &lt;= 100 for int</p>\n<p>0.0 &lt;= value &lt;= 1.0 for float</p>\n",
          "default": null
        },
        {
          "name": "text",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>A message to display above the progress bar. The text can optionally\ncontain Markdown and supports the following elements: Bold, Italics,\nStrikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/progress.py#L66"
    },
    "streamlit.pydeck_chart": {
      "name": "pydeck_chart",
      "signature": "st.pydeck_chart(pydeck_obj=None, use_container_width=False)",
      "example": "<blockquote>\n<p>Here's a chart using a HexagonLayer and a ScatterplotLayer. It uses either the\nlight or dark map style, based on which Streamlit theme is currently active:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport pydeck as pdk\n\nchart_data = pd.DataFrame(\n   np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],\n   columns=['lat', 'lon'])\n\nst.pydeck_chart(pdk.Deck(\n    map_style=None,\n    initial_view_state=pdk.ViewState(\n        latitude=37.76,\n        longitude=-122.4,\n        zoom=11,\n        pitch=50,\n    ),\n    layers=[\n        pdk.Layer(\n           'HexagonLayer',\n           data=chart_data,\n           get_position='[lon, lat]',\n           radius=200,\n           elevation_scale=4,\n           elevation_range=[0, 1000],\n           pickable=True,\n           extruded=True,\n        ),\n        pdk.Layer(\n            'ScatterplotLayer',\n            data=chart_data,\n            get_position='[lon, lat]',\n            get_color='[200, 30, 0, 160]',\n            get_radius=200,\n        ),\n    ],\n))\n</pre>\n\n                <Cloud name=\"doc-pydeck-chart\" path=\"\" query=\"\" stylePlaceholder=\"height: 530px\" />\n            <div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">To make the PyDeck chart's style consistent with Streamlit's theme,\nyou can set <tt class=\"docutils literal\">map_style=None</tt> in the <tt class=\"docutils literal\">pydeck.Deck</tt> object.</p>\n</div>\n</blockquote>\n",
      "description": "<p>Draw a chart using the PyDeck library.</p>\n<p>This supports 3D maps, point clouds, and more! More info about PyDeck\nat <a class=\"reference external\" href=\"https://deckgl.readthedocs.io/en/latest/\">https://deckgl.readthedocs.io/en/latest/</a>.</p>\n<p>These docs are also quite useful:</p>\n<ul class=\"simple\">\n<li>DeckGL docs: <a class=\"reference external\" href=\"https://github.com/uber/deck.gl/tree/master/docs\">https://github.com/uber/deck.gl/tree/master/docs</a></li>\n<li>DeckGL JSON docs: <a class=\"reference external\" href=\"https://github.com/uber/deck.gl/tree/master/modules/json\">https://github.com/uber/deck.gl/tree/master/modules/json</a></li>\n</ul>\n<p>When using this command, Mapbox provides the map tiles to render map\ncontent. Note that Mapbox is a third-party product, the use of which is\ngoverned by Mapbox's Terms of Use.</p>\n<p>Mapbox requires users to register and provide a token before users can\nrequest map tiles. Currently, Streamlit provides this token for you, but\nthis could change at any time. We strongly recommend all users create and\nuse their own personal Mapbox token to avoid any disruptions to their\nexperience. You can do this with the <tt class=\"docutils literal\">mapbox.token</tt> config option.</p>\n<p>To get a token for yourself, create an account at <a class=\"reference external\" href=\"https://mapbox.com\">https://mapbox.com</a>.\nFor more info on how to set config options, see\n<a class=\"reference external\" href=\"https://docs.streamlit.io/library/advanced-features/configuration\">https://docs.streamlit.io/library/advanced-features/configuration</a></p>\n",
      "args": [
        {
          "name": "pydeck_obj",
          "type_name": "pydeck.Deck or None",
          "is_optional": false,
          "description": "<p>Object specifying the PyDeck chart to draw.</p>\n",
          "default": null
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/deck_gl_json_chart.py#L36"
    },
    "streamlit.pyplot": {
      "name": "pyplot",
      "signature": "st.pyplot(fig=None, clear_figure=None, use_container_width=True, **kwargs)",
      "notes": "<blockquote>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Deprecation warning. After December 1st, 2020, we will remove the ability\nto specify no arguments in <cite>st.pyplot()</cite>, as that requires the use of\nMatplotlib's global figure object, which is not thread-safe. So\nplease always pass a figure object as shown in the example section\nabove.</p>\n</div>\n<p>Matplotlib supports several types of &quot;backends&quot;. If you're getting an\nerror using Matplotlib with Streamlit, try setting your backend to &quot;TkAgg&quot;:</p>\n<pre class=\"literal-block\">\necho &quot;backend: TkAgg&quot; &gt;&gt; ~/.matplotlib/matplotlibrc\n</pre>\n<p>For more information, see <a class=\"reference external\" href=\"https://matplotlib.org/faq/usage_faq.html\">https://matplotlib.org/faq/usage_faq.html</a>.</p>\n</blockquote>\n",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport matplotlib.pyplot as plt\nimport numpy as np\n\narr = np.random.normal(1, 1, size=100)\nfig, ax = plt.subplots()\nax.hist(arr, bins=20)\n\nst.pyplot(fig)\n</pre>\n\n                <Cloud name=\"doc-pyplot\" path=\"\" query=\"\" stylePlaceholder=\"height: 630px\" />\n            </blockquote>\n",
      "description": "<p>Display a matplotlib.pyplot figure.</p>\n",
      "args": [
        {
          "name": "fig",
          "type_name": "Matplotlib Figure",
          "is_optional": false,
          "description": "<p>The figure to plot. When this argument isn't specified, this\nfunction will render the global figure (but this is deprecated,\nas described below)</p>\n",
          "default": null
        },
        {
          "name": "clear_figure",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, the figure will be cleared after being rendered.\nIf False, the figure will not be cleared after being rendered.\nIf left unspecified, we pick a default based on the value of <cite>fig</cite>.</p>\n<ul class=\"simple\">\n<li>If <cite>fig</cite> is set, defaults to <cite>False</cite>.</li>\n<li>If <cite>fig</cite> is not set, defaults to <cite>True</cite>. This simulates Jupyter's\napproach to matplotlib rendering.</li>\n</ul>\n",
          "default": "based"
        },
        {
          "name": "use_container_width",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>If True, set the chart width to the column width. Defaults to <cite>True</cite>.</p>\n",
          "default": "s"
        },
        {
          "name": "**kwargs",
          "type_name": "any",
          "is_optional": false,
          "description": "<p>Arguments to pass to Matplotlib's savefig function.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/pyplot.py#L38"
    },
    "streamlit.radio": {
      "name": "radio",
      "signature": "st.radio(label, options, index=0, format_func=special_internal_function, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, horizontal=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ngenre = st.radio(\n    &quot;What\\'s your favorite movie genre&quot;,\n    ('Comedy', 'Drama', 'Documentary'))\n\nif genre == 'Comedy':\n    st.write('You selected comedy.')\nelse:\n    st.write(&quot;You didn\\'t select comedy.&quot;)\n</pre>\n\n                <Cloud name=\"doc-radio\" path=\"\" query=\"\" stylePlaceholder=\"height: 260px\" />\n            </blockquote>\n",
      "description": "<p>Display a radio button widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this radio group is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "options",
          "type_name": "Sequence, numpy.ndarray, pandas.Series, pandas.DataFrame, or pandas.Index",
          "is_optional": false,
          "description": "<p>Labels for the radio options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.</p>\n",
          "default": "."
        },
        {
          "name": "index",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The index of the preselected option on first render.</p>\n",
          "default": null
        },
        {
          "name": "format_func",
          "type_name": "function",
          "is_optional": false,
          "description": "<p>Function to modify the display of radio options. It receives\nthe raw option as an argument and should output the label to be\nshown for that option. This has no impact on the return value of\nthe radio.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the radio.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this radio's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the radio button if set to\nTrue. The default is False. This argument can only be supplied by\nkeyword.</p>\n",
          "default": "False."
        },
        {
          "name": "horizontal",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which orients the radio group horizontally.\nThe default is false (vertical buttons). This argument can only\nbe supplied by keyword.</p>\n",
          "default": "false"
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "any",
          "is_generator": false,
          "description": "<p>The selected option.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/radio.py#L75"
    },
    "streamlit.select_slider": {
      "name": "select_slider",
      "signature": "st.select_slider(label, options=(), value=None, format_func=special_internal_function, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "examples": "<pre class=\"doctest-block\">\nimport streamlit as st\n\ncolor = st.select_slider(\n    'Select a color of the rainbow',\n    options=['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'])\nst.write('My favorite color is', color)\n</pre>\n<p>And here's an example of a range select slider:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nstart_color, end_color = st.select_slider(\n    'Select a range of color wavelength',\n    options=['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n    value=('red', 'blue'))\nst.write('You selected wavelengths between', start_color, 'and', end_color)\n</pre>\n\n                <Cloud name=\"doc-select-slider\" path=\"\" query=\"\" stylePlaceholder=\"height: 450px\" />\n            ",
      "description": "<p>Display a slider widget to select items from a list.</p>\n<p>This also allows you to render a range slider by passing a two-element\ntuple or list as the <cite>value</cite>.</p>\n<p>The difference between <cite>st.select_slider</cite> and <cite>st.slider</cite> is that\n<cite>select_slider</cite> accepts any datatype and takes an iterable set of\noptions, while <cite>slider</cite> only accepts numerical or date/time data and\ntakes a range as input.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this slider is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "options",
          "type_name": "Sequence, numpy.ndarray, pandas.Series, pandas.DataFrame, or pandas.Index",
          "is_optional": false,
          "description": "<p>Labels for the slider options. All options will be cast to str\ninternally by default. For pandas.DataFrame, the first column is\nselected.</p>\n",
          "default": "."
        },
        {
          "name": "value",
          "type_name": "a supported type or a tuple/list of supported types or None",
          "is_optional": false,
          "description": "<p>The value of the slider when it first renders. If a tuple/list\nof two values is passed here, then a range slider with those lower\nand upper bounds is rendered. For example, if set to <cite>(1, 10)</cite> the\nslider will have a selectable range between 1 and 10.\nDefaults to first option.</p>\n",
          "default": "first"
        },
        {
          "name": "format_func",
          "type_name": "function",
          "is_optional": false,
          "description": "<p>Function to modify the display of the labels from the options.\nargument. It receives the option as an argument and its output\nwill be cast to str.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the select slider.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this select_slider's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the select slider if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "any value or tuple of any value",
          "is_generator": false,
          "description": "<p>The current value of the slider widget. The return type will match\nthe data type of the value parameter.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/select_slider.py#L106"
    },
    "streamlit.selectbox": {
      "name": "selectbox",
      "signature": "st.selectbox(label, options, index=0, format_func=special_internal_function, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\noption = st.selectbox(\n    'How would you like to be contacted?',\n    ('Email', 'Home phone', 'Mobile phone'))\n\nst.write('You selected:', option)\n</pre>\n\n                <Cloud name=\"doc-selectbox\" path=\"\" query=\"\" stylePlaceholder=\"height: 320px\" />\n            </blockquote>\n",
      "description": "<p>Display a select widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this select widget is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "options",
          "type_name": "Sequence, numpy.ndarray, pandas.Series, pandas.DataFrame, or pandas.Index",
          "is_optional": false,
          "description": "<p>Labels for the select options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.</p>\n",
          "default": "."
        },
        {
          "name": "index",
          "type_name": "int",
          "is_optional": false,
          "description": "<p>The index of the preselected option on first render.</p>\n",
          "default": null
        },
        {
          "name": "format_func",
          "type_name": "function",
          "is_optional": false,
          "description": "<p>Function to modify the display of the labels. It receives the option\nas an argument and its output will be cast to str.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the selectbox.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this selectbox's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the selectbox if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "any",
          "is_generator": false,
          "description": "<p>The selected option</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/selectbox.py#L71"
    },
    "streamlit.set_option": {
      "name": "set_option",
      "signature": "st.set_option(key, value)",
      "description": "<p>Set config option.</p>\n<dl class=\"docutils\">\n<dt>Currently, only the following config options can be set within the script itself:</dt>\n<dd><ul class=\"first last simple\">\n<li>client.caching</li>\n<li>client.displayEnabled</li>\n<li>deprecation.*</li>\n</ul>\n</dd>\n</dl>\n<p>Calling with any other options will raise StreamlitAPIException.</p>\n<p>Run <cite>streamlit config show</cite> in the terminal to see all available options.</p>\n",
      "args": [
        {
          "name": "key",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The config option key of the form &quot;section.optionName&quot;. To see all\navailable options, run <cite>streamlit config show</cite> on a terminal.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": null,
          "is_optional": null,
          "description": "<p>The new value to assign to this config option.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/config.py#L92"
    },
    "streamlit.set_page_config": {
      "name": "set_page_config",
      "signature": "st.set_page_config(page_title=None, page_icon=None, layout=\"centered\", initial_sidebar_state=\"auto\", menu_items=None)",
      "example": "<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.set_page_config(\n    page_title=&quot;Ex-stream-ly Cool App&quot;,\n    page_icon=&quot;\ud83e\uddca&quot;,\n    layout=&quot;wide&quot;,\n    initial_sidebar_state=&quot;expanded&quot;,\n    menu_items={\n        'Get Help': 'https://www.extremelycoolapp.com/help',\n        'Report a bug': &quot;https://www.extremelycoolapp.com/bug&quot;,\n        'About': &quot;# This is a header. This is an *extremely* cool app!&quot;\n    }\n)\n</pre>\n",
      "description": "<p>Configures the default settings of the page.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This must be the first Streamlit command used in your app, and must only\nbe set once.</p>\n</div>\n",
      "args": [
        {
          "name": "page_title",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>The page title, shown in the browser tab. If None, defaults to the\nfilename of the script (&quot;app.py&quot; would show &quot;app \u2022 Streamlit&quot;).</p>\n",
          "default": "the"
        },
        {
          "name": "page_icon",
          "type_name": "Anything supported by st.image or str or None",
          "is_optional": false,
          "description": "<p>The page favicon.\nBesides the types supported by <cite>st.image</cite> (like URLs or numpy arrays),\nyou can pass in an emoji as a string (&quot;\ud83e\udd88&quot;) or a shortcode (&quot;:shark:&quot;).\nIf you're feeling lucky, try &quot;random&quot; for a random emoji!\nEmoji icons are courtesy of Twemoji and loaded from MaxCDN.</p>\n",
          "default": null
        },
        {
          "name": "layout",
          "type_name": "\"centered\" or \"wide\"",
          "is_optional": false,
          "description": "<p>How the page content should be laid out. Defaults to &quot;centered&quot;,\nwhich constrains the elements into a centered column of fixed width;\n&quot;wide&quot; uses the entire screen.</p>\n",
          "default": "s"
        },
        {
          "name": "initial_sidebar_state",
          "type_name": "\"auto\" or \"expanded\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>How the sidebar should start out. Defaults to &quot;auto&quot;,\nwhich hides the sidebar on mobile-sized devices, and shows it otherwise.\n&quot;expanded&quot; shows the sidebar initially; &quot;collapsed&quot; hides it.</p>\n",
          "default": "s"
        },
        {
          "name": "menu_items",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>Configure the menu that appears on the top-right side of this app.\nThe keys in this dict denote the menu item you'd like to configure:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt>&quot;Get help&quot;: str or None</dt>\n<dd>The URL this menu item should point to.\nIf None, hides this menu item.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&quot;Report a Bug&quot;: str or None</dt>\n<dd>The URL this menu item should point to.\nIf None, hides this menu item.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt>&quot;About&quot;: str or None</dt>\n<dd>A markdown string to show in the About dialog.\nIf None, only shows Streamlit's default About text.</dd>\n</dl>\n</li>\n</ul>\n<p>The URL may also refer to an email address e.g. <tt class=\"docutils literal\">mailto:john&#64;example.com</tt>.</p>\n",
          "default": "About"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/commands/page_config.py#L114"
    },
    "streamlit.slider": {
      "name": "slider",
      "signature": "st.slider(label, min_value=None, max_value=None, value=None, step=None, format=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\")",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nage = st.slider('How old are you?', 0, 130, 25)\nst.write(&quot;I'm &quot;, age, 'years old')\n</pre>\n<p>And here's an example of a range slider:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nvalues = st.slider(\n    'Select a range of values',\n    0.0, 100.0, (25.0, 75.0))\nst.write('Values:', values)\n</pre>\n<p>This is a range time slider:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nfrom datetime import time\n\nappointment = st.slider(\n    &quot;Schedule your appointment:&quot;,\n    value=(time(11, 30), time(12, 45)))\nst.write(&quot;You're scheduled for:&quot;, appointment)\n</pre>\n<p>Finally, a datetime slider:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nfrom datetime import datetime\n\nstart_time = st.slider(\n    &quot;When do you start?&quot;,\n    value=datetime(2020, 1, 1, 9, 30),\n    format=&quot;MM/DD/YY - hh:mm&quot;)\nst.write(&quot;Start time:&quot;, start_time)\n</pre>\n\n                <Cloud name=\"doc-slider\" path=\"\" query=\"\" stylePlaceholder=\"height: 300px\" />\n            </blockquote>\n",
      "description": "<p>Display a slider widget.</p>\n<p>This supports int, float, date, time, and datetime types.</p>\n<p>This also allows you to render a range slider by passing a two-element\ntuple or list as the <cite>value</cite>.</p>\n<p>The difference between <cite>st.slider</cite> and <cite>st.select_slider</cite> is that\n<cite>slider</cite> only accepts numerical or date/time data and takes a range as\ninput, while <cite>select_slider</cite> accepts any datatype and takes an iterable\nset of options.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this slider is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "min_value",
          "type_name": "a supported type or None",
          "is_optional": false,
          "description": "<p>The minimum permitted value.\nDefaults to 0 if the value is an int, 0.0 if a float,\nvalue - timedelta(days=14) if a date/datetime, time.min if a time</p>\n",
          "default": "0"
        },
        {
          "name": "max_value",
          "type_name": "a supported type or None",
          "is_optional": false,
          "description": "<p>The maximum permitted value.\nDefaults to 100 if the value is an int, 1.0 if a float,\nvalue + timedelta(days=14) if a date/datetime, time.max if a time</p>\n",
          "default": "100"
        },
        {
          "name": "value",
          "type_name": "a supported type or a tuple/list of supported types or None",
          "is_optional": false,
          "description": "<p>The value of the slider when it first renders. If a tuple/list\nof two values is passed here, then a range slider with those lower\nand upper bounds is rendered. For example, if set to <cite>(1, 10)</cite> the\nslider will have a selectable range between 1 and 10.\nDefaults to min_value.</p>\n",
          "default": "min_value."
        },
        {
          "name": "step",
          "type_name": "int/float/timedelta or None",
          "is_optional": false,
          "description": "<p>The stepping interval.\nDefaults to 1 if the value is an int, 0.01 if a float,\ntimedelta(days=1) if a date/datetime, timedelta(minutes=15) if a time\n(or if max_value - min_value &lt; 1 day)</p>\n",
          "default": "1"
        },
        {
          "name": "format",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>A printf-style format string controlling how the interface should\ndisplay numbers. This does not impact the return value.\nFormatter for int/float supports: %d %e %f %g %i\nFormatter for date/time/datetime uses Moment.js notation:\n<a class=\"reference external\" href=\"https://momentjs.com/docs/#/displaying/format/\">https://momentjs.com/docs/#/displaying/format/</a></p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the slider.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this slider's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the slider if set to True. The\ndefault is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "int/float/date/time/datetime or tuple of int/float/date/time/datetime",
          "is_generator": false,
          "description": "<p>The current value of the slider widget. The return type will match\nthe data type of the value parameter.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/slider.py#L171"
    },
    "streamlit.snow": {
      "name": "snow",
      "signature": "st.snow()",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.snow()\n</pre>\n<p>...then watch your app and get ready for a cool celebration!</p>\n</blockquote>\n",
      "description": "<p>Draw celebratory snowfall.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/snow.py#L25"
    },
    "streamlit.spinner": {
      "name": "spinner",
      "signature": "st.spinner(text=\"In progress...\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport time\nimport streamlit as st\n\nwith st.spinner('Wait for it...'):\n    time.sleep(5)\nst.success('Done!')\n</pre>\n</blockquote>\n",
      "description": "<p>Temporarily displays a message while executing a block of code.</p>\n",
      "args": [
        {
          "name": "text",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A message to display while executing that block</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/spinner.py#L23"
    },
    "streamlit.stop": {
      "name": "stop",
      "signature": "st.stop()",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nname = st.text_input('Name')\nif not name:\n  st.warning('Please input a name.')\n  st.stop()\nst.success('Thank you for inputting a name.')\n</pre>\n</blockquote>\n",
      "description": "<p>Stops execution immediately.</p>\n<p>Streamlit will not run any statements after <cite>st.stop()</cite>.\nWe recommend rendering a message to explain why the script has stopped.\nWhen run outside of Streamlit, this will raise an Exception.</p>\n",
      "args": [],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/commands/execution_control.py#L25"
    },
    "streamlit.subheader": {
      "name": "subheader",
      "signature": "st.subheader(body, anchor=None, *, help=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.subheader('This is a subheader')\nst.subheader('A subheader with _italics_ :blue[colors] and emojis :sunglasses:')\n</pre>\n</blockquote>\n",
      "description": "<p>Display text in subheader formatting.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The text to display as Github-flavored Markdown. Syntax\ninformation can be found at: <a class=\"reference external\" href=\"https://github.github.com/gfm\">https://github.github.com/gfm</a>.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "anchor",
          "type_name": "str or False",
          "is_optional": false,
          "description": "<p>The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.\nIf False, the anchor is not shown in the UI.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the subheader.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/heading.py#L93"
    },
    "streamlit.success": {
      "name": "success",
      "signature": "st.success(body, *, icon=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.success('This is a success message!', icon=&quot;\u2705&quot;)\n</pre>\n</blockquote>\n",
      "description": "<p>Display a success message.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The success text to display.</p>\n",
          "default": null
        },
        {
          "name": "icon",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>An optional, keyword-only argument that specifies an emoji to use as\nthe icon for the alert. Shortcodes are not allowed, please use a\nsingle character instead. E.g. &quot;\ud83d\udea8&quot;, &quot;\ud83d\udd25&quot;, &quot;\ud83e\udd16&quot;, etc.\nDefaults to None, which means no icon is displayed.</p>\n",
          "default": "None"
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/alert.py#L136"
    },
    "streamlit.table": {
      "name": "table",
      "signature": "st.table(data=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame(\n   np.random.randn(10, 5),\n   columns=('col %d' % i for i in range(5)))\n\nst.table(df)\n</pre>\n\n                <Cloud name=\"doc-table\" path=\"\" query=\"\" stylePlaceholder=\"height: 480px\" />\n            </blockquote>\n",
      "description": "<p>Display a static table.</p>\n<p>This differs from <cite>st.dataframe</cite> in that the table in this case is\nstatic: its entire contents are laid out directly on the page.</p>\n",
      "args": [
        {
          "name": "data",
          "type_name": "pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, snowflake.snowpark.table.Table, Iterable, dict, or None",
          "is_optional": false,
          "description": "<p>The table data.\nPyarrow tables are not supported by Streamlit's legacy DataFrame serialization\n(i.e. with <cite>config.dataFrameSerialization = &quot;legacy&quot;</cite>).\nTo use pyarrow tables, please enable pyarrow by changing the config setting,\n<cite>config.dataFrameSerialization = &quot;arrow&quot;</cite>.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/dataframe_selector.py#L122"
    },
    "streamlit.tabs": {
      "name": "tabs",
      "signature": "st.tabs(tabs)",
      "examples": "<blockquote>\n<p>You can use <cite>with</cite> notation to insert any element into a tab:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ntab1, tab2, tab3 = st.tabs([&quot;Cat&quot;, &quot;Dog&quot;, &quot;Owl&quot;])\n\nwith tab1:\n   st.header(&quot;A cat&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/cat.jpg&quot;, width=200)\n\nwith tab2:\n   st.header(&quot;A dog&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/dog.jpg&quot;, width=200)\n\nwith tab3:\n   st.header(&quot;An owl&quot;)\n   st.image(&quot;https://static.streamlit.io/examples/owl.jpg&quot;, width=200)\n</pre>\n\n                <Cloud name=\"doc-tabs1\" path=\"\" query=\"\" stylePlaceholder=\"height: 620px\" />\n            <p>Or you can just call methods directly in the returned objects:</p>\n<pre class=\"doctest-block\">\nimport streamlit as st\nimport numpy as np\n\ntab1, tab2 = st.tabs([&quot;\ud83d\udcc8 Chart&quot;, &quot;\ud83d\uddc3 Data&quot;])\ndata = np.random.randn(10, 1)\n\ntab1.subheader(&quot;A tab with a chart&quot;)\ntab1.line_chart(data)\n\ntab2.subheader(&quot;A tab with the data&quot;)\ntab2.write(data)\n</pre>\n\n                <Cloud name=\"doc-tabs2\" path=\"\" query=\"\" stylePlaceholder=\"height: 700px\" />\n            </blockquote>\n",
      "description": "<p>Insert containers separated into tabs.</p>\n<p>Inserts a number of multi-element containers as tabs.\nTabs are a navigational element that allows users to easily\nmove between groups of related content.</p>\n<p>To add elements to the returned containers, you can use &quot;with&quot; notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">All the content of every tab is always sent to and rendered on the frontend.\nConditional rendering is currently not supported.</p>\n</div>\n",
      "args": [
        {
          "name": "tabs",
          "type_name": "list of strings",
          "is_optional": false,
          "description": "<p>Creates a tab for each string in the list. The first tab is selected by default.\nThe string is used as the name of the tab and can optionally contain Markdown,\nsupporting the following elements: Bold, Italics, Strikethroughs, Inline Code,\nEmojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n",
          "default": "."
        }
      ],
      "returns": [
        {
          "type_name": "list of containers",
          "is_generator": false,
          "description": "<p>A list of container objects.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/layouts.py#L208"
    },
    "streamlit.text": {
      "name": "text",
      "signature": "st.text(body, *, help=None)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.text('This is some text.')\n</pre>\n</blockquote>\n",
      "description": "<p>Write fixed-width and preformatted text.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The string to display.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the text.</p>\n",
          "default": null
        }
      ],
      "returns": [],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/text.py#L27"
    },
    "streamlit.text_area": {
      "name": "text_area",
      "signature": "st.text_area(label, value=\"\", height=None, max_chars=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, placeholder=None, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ntxt = st.text_area('Text to analyze', '''\n    It was the best of times, it was the worst of times, it was\n    the age of wisdom, it was the age of foolishness, it was\n    the epoch of belief, it was the epoch of incredulity, it\n    was the season of Light, it was the season of Darkness, it\n    was the spring of hope, it was the winter of despair, (...)\n    ''')\nst.write('Sentiment:', run_sentiment_analysis(txt))\n</pre>\n</blockquote>\n",
      "description": "<p>Display a multi-line text input widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "object",
          "is_optional": false,
          "description": "<p>The text value of this widget when it first renders. This will be\ncast to str internally.</p>\n",
          "default": null
        },
        {
          "name": "height",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Desired height of the UI element expressed in pixels. If None, a\ndefault height is used.</p>\n",
          "default": "height"
        },
        {
          "name": "max_chars",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Maximum number of characters allowed in text area.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the textarea.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this text_area's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "placeholder",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>An optional string displayed when the text area is empty. If None,\nno text is displayed. This argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the text area if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "str",
          "is_generator": false,
          "description": "<p>The current value of the text input widget.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/text_widgets.py#L274"
    },
    "streamlit.text_input": {
      "name": "text_input",
      "signature": "st.text_input(label, value=\"\", max_chars=None, key=None, type=\"default\", help=None, autocomplete=None, on_change=None, args=None, kwargs=None, *, placeholder=None, disabled=False, label_visibility=\"visible\")",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\ntitle = st.text_input('Movie title', 'Life of Brian')\nst.write('The current movie title is', title)\n</pre>\n\n                <Cloud name=\"doc-text-input\" path=\"\" query=\"\" stylePlaceholder=\"height: 260px\" />\n            </blockquote>\n",
      "description": "<p>Display a single-line text input widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "object",
          "is_optional": false,
          "description": "<p>The text value of this widget when it first renders. This will be\ncast to str internally.</p>\n",
          "default": null
        },
        {
          "name": "max_chars",
          "type_name": "int or None",
          "is_optional": false,
          "description": "<p>Max number of characters allowed in text input.</p>\n",
          "default": null
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "type",
          "type_name": "\"default\" or \"password\"",
          "is_optional": false,
          "description": "<p>The type of the text input. This can be either &quot;default&quot; (for\na regular text input), or &quot;password&quot; (for a text input that\nmasks the user's typed value). Defaults to &quot;default&quot;.</p>\n",
          "default": "s"
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the input.</p>\n",
          "default": null
        },
        {
          "name": "autocomplete",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional value that will be passed to the &lt;input&gt; element's\nautocomplete property. If unspecified, this value will be set to\n&quot;new-password&quot; for &quot;password&quot; inputs, and the empty string for\n&quot;default&quot; inputs. For more details, see <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete</a></p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this text input's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "placeholder",
          "type_name": "str or None",
          "is_optional": false,
          "description": "<p>An optional string displayed when the text input is empty. If None,\nno text is displayed. This argument can only be supplied by keyword.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the text input if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        }
      ],
      "returns": [
        {
          "type_name": "str",
          "is_generator": false,
          "description": "<p>The current value of the text input widget.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/text_widgets.py#L71"
    },
    "streamlit.time_input": {
      "name": "time_input",
      "signature": "st.time_input(label, value=None, key=None, help=None, on_change=None, args=None, kwargs=None, *, disabled=False, label_visibility=\"visible\", step=0:15:00)",
      "example": "<blockquote>\n<pre class=\"doctest-block\">\nimport datetime\nimport streamlit as st\n\nt = st.time_input('Set an alarm for', datetime.time(8, 45))\nst.write('Alarm is set for', t)\n</pre>\n\n                <Cloud name=\"doc-time-input\" path=\"\" query=\"\" stylePlaceholder=\"height: 260px\" />\n            </blockquote>\n",
      "description": "<p>Display a time input widget.</p>\n",
      "args": [
        {
          "name": "label",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>A short label explaining to the user what this time input is for.\nThe label can optionally contain Markdown and supports the following\nelements: Bold, Italics, Strikethroughs, Inline Code, Emojis, and Links.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n<p>Unsupported elements are unwrapped so only their children (text contents) render.\nDisplay unsupported elements as literal characters by\nbackslash-escaping them. E.g. <tt class=\"docutils literal\">1\\. Not an ordered list</tt>.</p>\n<p>For accessibility reasons, you should never set an empty label (label=&quot;&quot;)\nbut hide it with label_visibility if needed. In the future, we may disallow\nempty labels by raising an exception.</p>\n",
          "default": null
        },
        {
          "name": "value",
          "type_name": "datetime.time/datetime.datetime",
          "is_optional": false,
          "description": "<p>The value of this widget when it first renders. This will be\ncast to str internally. Defaults to the current time.</p>\n",
          "default": "the"
        },
        {
          "name": "key",
          "type_name": "str or int",
          "is_optional": false,
          "description": "<p>An optional string or integer to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.</p>\n",
          "default": null
        },
        {
          "name": "help",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>An optional tooltip that gets displayed next to the input.</p>\n",
          "default": null
        },
        {
          "name": "on_change",
          "type_name": "callable",
          "is_optional": false,
          "description": "<p>An optional callback invoked when this time_input's value changes.</p>\n",
          "default": null
        },
        {
          "name": "args",
          "type_name": "tuple",
          "is_optional": false,
          "description": "<p>An optional tuple of args to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "kwargs",
          "type_name": "dict",
          "is_optional": false,
          "description": "<p>An optional dict of kwargs to pass to the callback.</p>\n",
          "default": null
        },
        {
          "name": "disabled",
          "type_name": "bool",
          "is_optional": false,
          "description": "<p>An optional boolean, which disables the time input if set to True.\nThe default is False. This argument can only be supplied by keyword.</p>\n",
          "default": "False."
        },
        {
          "name": "label_visibility",
          "type_name": "\"visible\" or \"hidden\" or \"collapsed\"",
          "is_optional": false,
          "description": "<p>The visibility of the label. If &quot;hidden&quot;, the label doesn't show but there\nis still empty space for it above the widget (equivalent to label=&quot;&quot;).\nIf &quot;collapsed&quot;, both the label and the space are removed. Default is\n&quot;visible&quot;. This argument can only be supplied by keyword.</p>\n",
          "default": "is"
        },
        {
          "name": "step",
          "type_name": "int or timedelta",
          "is_optional": false,
          "description": "<p>The stepping interval in seconds. Defaults to 900, i.e. 15 minutes.\nYou can also pass a datetime.timedelta object.</p>\n",
          "default": "900"
        }
      ],
      "returns": [
        {
          "type_name": "datetime.time",
          "is_generator": false,
          "description": "<p>The current value of the time input widget.</p>\n",
          "return_name": null
        }
      ],
      "source": "https://github.com/streamlit/streamlit/blob/1.22.0/lib/streamlit/elements/time_widgets.py#L214"
    },
    "streamlit.title": {
      "name": "title",
      "signature": "st.title(body, anchor=None, *, help=None)",
      "examples": "<blockquote>\n<pre class=\"doctest-block\">\nimport streamlit as st\n\nst.title('This is a title')\nst.title('A title with _italics_ :blue[colors] and emojis :sunglasses:')\n</pre>\n</blockquote>\n",
      "description": "<p>Display text in title formatting.</p>\n<p>Each document should have a single <cite>st.title()</cite>, although this is not\nenforced.</p>\n",
      "args": [
        {
          "name": "body",
          "type_name": "str",
          "is_optional": false,
          "description": "<p>The text to display as Github-flavored Markdown. Syntax\ninformation can be found at: <a class=\"reference external\" href=\"https://github.github.com/gfm\">https://github.github.com/gfm</a>.</p>\n<p>This also supports:</p>\n<ul class=\"simple\">\n<li>Emoji shortcodes, such as <tt class=\"docutils literal\">:+1:</tt>  and <tt class=\"docutils literal\">:sunglasses:</tt>.\nFor a list of all supported codes,\nsee <a class=\"reference external\" href=\"https://share.streamlit.io/streamlit/emoji-shortcodes\">https://share.streamlit.io/streamlit/emoji-shortcodes</a>.</li>\n<li>LaTeX expressions, by wrapping them in &quot;$&quot; or &quot;$$&quot; (the &quot;$$&quot;\nmust be on their own lines). Supported LaTeX functions are listed\nat <a class=\"reference external\" href=\"https://katex.org/docs/supported.html\">https://katex.org/docs/supported.html</a>.</li>\n<li>Colored text, using the syntax <tt class=\"docutils literal\">:color[text to be colored]</tt>,\nwhere <tt class=\"docutils literal\">color</tt> needs to be replaced with any of the following\nsupported colors: blue, green, orange, red, violet.</li>\n</ul>\n",
          "default": null
        },
        {
          "name": "anchor",
          "type_name": "str or False",
          "is_optional": false,
          "description": "<p>The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.\nIf False, the anchor is not shown in the UI.</p>\n",
          "default