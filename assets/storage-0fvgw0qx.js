var h=Object.defineProperty;var y=(l,r,e)=>r in l?h(l,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[r]=e;var p=(l,r,e)=>y(l,typeof r!="symbol"?r+"":r,e);const n={FOLDERS:"folders",SYNC_ENABLED:"syncEnabled"},u=1,c=class c{constructor(){}static getInstance(){return c.instance||(c.instance=new c),c.instance}async initialize(){const r=await chrome.storage.local.get(["version",n.FOLDERS,n.SYNC_ENABLED]);(!r.version||r.version<u)&&await this.setStorageData({version:u,folders:r[n.FOLDERS]||[],syncEnabled:r[n.SYNC_ENABLED]||!1})}async getFolders(){return(await chrome.storage.local.get(n.FOLDERS))[n.FOLDERS]||[]}async saveToCloud(){const r=await this.getFolders();try{await chrome.storage.sync.set({[n.FOLDERS]:r})}catch(e){throw console.error("Failed to save to cloud:",e),e}}async loadFromCloud(){try{const e=(await chrome.storage.sync.get(n.FOLDERS))[n.FOLDERS]||[];await this.saveFolders(e)}catch(r){throw console.error("Failed to load from cloud:",r),r}}async saveFolders(r){this.validateFolders(r),await chrome.storage.local.set({[n.FOLDERS]:r})}async exportFolders(){const r=await this.getFolders(),e=JSON.stringify(r,null,2),t=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(t),s=document.createElement("a");s.href=o,s.download=`RCP-backup-${new Date().toISOString().split("T")[0]}.json`;const d=document.querySelector('link[rel="icon"]');d&&s.setAttribute("data-icon",d.href),document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(o)}async importFolders(r){try{const e=await r.text();let t;try{t=JSON.parse(e)}catch{return{success:!1,error:"Invalid JSON format. Please make sure your backup file is a valid JSON file."}}if(!Array.isArray(t))return{success:!1,error:"Invalid backup format. The file should contain an array of folders."};for(const o of t){if(!o.id||typeof o.id!="string")return{success:!1,error:`Invalid folder structure: missing or invalid 'id' in folder "${o.name||"unnamed"}"`};if(!o.name||typeof o.name!="string")return{success:!1,error:`Invalid folder structure: missing or invalid 'name' in folder with ID "${o.id}"`};if(!Array.isArray(o.prompts))return{success:!1,error:`Invalid folder structure: 'prompts' must be an array in folder "${o.name}"`};for(const s of o.prompts){if(!s.id||typeof s.id!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'id' in prompt "${s.title||"unnamed"}" in folder "${o.name}"`};if(!s.title||typeof s.title!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'title' in prompt with ID "${s.id}" in folder "${o.name}"`};if(!s.text||typeof s.text!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'text' in prompt "${s.title}" in folder "${o.name}"`};if(!s.timestamp||typeof s.timestamp!="string"||isNaN(Date.parse(s.timestamp)))return{success:!1,error:`Invalid prompt structure: missing or invalid 'timestamp' in prompt "${s.title}" in folder "${o.name}"`}}}return await this.saveFolders(t),{success:!0}}catch(e){return console.error("Error importing folders:",e),{success:!1,error:"An unexpected error occurred while importing folders. Please check the console for details."}}}async importPromptPackage(r){try{const e=await r.text();let t;try{t=JSON.parse(e)}catch{return{success:!1,error:"Invalid JSON format. Please make sure your package file is a valid JSON file."}}if(!Array.isArray(t))return{success:!1,error:"Invalid package format. The file should contain an array of folders."};for(const a of t){if(!a.id||typeof a.id!="string")return{success:!1,error:`Invalid folder structure: missing or invalid 'id' in folder "${a.name||"unnamed"}"`};if(!a.name||typeof a.name!="string")return{success:!1,error:`Invalid folder structure: missing or invalid 'name' in folder with ID "${a.id}"`};if(!Array.isArray(a.prompts))return{success:!1,error:`Invalid folder structure: 'prompts' must be an array in folder "${a.name}"`};for(const i of a.prompts){if(!i.id||typeof i.id!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'id' in prompt "${i.title||"unnamed"}" in folder "${a.name}"`};if(!i.title||typeof i.title!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'title' in prompt with ID "${i.id}" in folder "${a.name}"`};if(!i.text||typeof i.text!="string")return{success:!1,error:`Invalid prompt structure: missing or invalid 'text' in prompt "${i.title}" in folder "${a.name}"`};if(!i.timestamp||typeof i.timestamp!="string"||isNaN(Date.parse(i.timestamp)))return{success:!1,error:`Invalid prompt structure: missing or invalid 'timestamp' in prompt "${i.title}" in folder "${a.name}"`}}}const o=await this.getFolders(),s=o.filter(a=>!a.isImported),d=o.filter(a=>a.isImported),m=t.map(a=>({...a,id:crypto.randomUUID(),name:a.name,isImported:!0,prompts:a.prompts.map(i=>({...i,id:crypto.randomUUID()}))})),g=[...s,...d,...m];return await this.saveFolders(g),{success:!0,message:`Successfully imported ${m.length} folder${m.length===1?"":"s"}`}}catch(e){return console.error("Error importing prompt package:",e),{success:!1,error:"An unexpected error occurred while importing the prompt package. Please check the console for details."}}}async setStorageData(r){await chrome.storage.local.set(r)}validateFolders(r){if(!Array.isArray(r))throw new Error("Folders must be an array");r.forEach(e=>{if(!e.id||typeof e.id!="string")throw new Error("Each folder must have a valid string ID");if(!e.name||typeof e.name!="string")throw new Error("Each folder must have a valid string name");if(!Array.isArray(e.prompts))throw new Error("Folder prompts must be an array");e.prompts.forEach(t=>{if(!t.id||typeof t.id!="string")throw new Error("Each prompt must have a valid string ID");if(!t.title||typeof t.title!="string")throw new Error("Each prompt must have a valid string title");if(!t.text||typeof t.text!="string")throw new Error("Each prompt must have valid string text");if(!t.timestamp||typeof t.timestamp!="string")throw new Error("Each prompt must have a valid timestamp")})})}async clearStorage(){await chrome.storage.local.clear(),await this.initialize()}async toggleSync(r){if(await chrome.storage.local.set({[n.SYNC_ENABLED]:r}),r)try{const e=await chrome.storage.sync.get(n.FOLDERS);if(e[n.FOLDERS])await this.saveFolders(e[n.FOLDERS]);else{const t=await this.getFolders();await chrome.storage.sync.set({[n.FOLDERS]:t})}}catch(e){throw console.error("Error during initial sync:",e),e}}};p(c,"instance");let f=c;const w=f.getInstance();export{w as s};
//# sourceMappingURL=storage-0fvgw0qx.js.map
