import{s as x}from"./storage-0fvgw0qx.js";const m={parent:"rightClickPrompt",folder:o=>`folder_${o}`,prompt:o=>`prompt_${o}`},P=["Prompt copied to clipboard. Ready to paste!","Prompt copied. Your clipboard is ready for use.","Copied! Use this prompt where you need it.","Your prompt is copied to clipboard.","Prompt copied to clipboard.","Prompt copied: Ready to use.","Success! Prompt copied to clipboard.","Clipboard updated with your prompt.","Prompt copied and ready to use.","Prompt copied to clipboard.","Prompt copied successfully.","Your prompt is now on your clipboard.","Prompt copied to clipboard.","Prompt copied. Ready to use.","Prompt now in your clipboard.","Prompt copied to clipboard.","Prompt copied successfully.","Prompt ready to paste.","Prompt copied to clipboard.","Clipboard updated with prompt.","Prompt copied to clipboard.","Prompt copied and ready to use.","Prompt copied to clipboard."];function T(){return P[Math.floor(Math.random()*P.length)]}async function g(o){try{const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!(t!=null&&t.id)){console.log("No active tab found for toast notification");return}if(t.url&&(t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("devtools://")||t.url.startsWith("edge://")||t.url.startsWith("about:"))){console.log("Using badge notification for restricted URL:",t.url),chrome.action.setBadgeText({text:"✓"}),chrome.action.setBadgeBackgroundColor({color:"#EF4444"}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},2e3);return}if(await chrome.permissions.contains({permissions:["scripting"]}))try{await chrome.scripting.executeScript({target:{tabId:t.id??-1},func:e=>{const i="rcp-toast-notification",n=()=>{document.querySelectorAll(".rcp-toast").forEach(l=>{if(l.parentNode)try{document.body.removeChild(l)}catch(p){console.error("Error removing toast:",p)}});const E=document.getElementById(i);if(E&&E.parentNode)try{E.parentNode.removeChild(E)}catch(l){console.error("Error removing toast by ID:",l)}};n();const r=document.createElement("div");r.id=i,r.className="rcp-toast";const s=document.createElement("span");s.className="rcp-toast-icon",s.innerHTML=`
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200" width="20" height="20">
                <!-- White outline around the whole logo (slightly larger) -->
                <polygon points="100,36 155,68 155,132 100,164 45,132 45,68" fill="none" stroke="white" stroke-width="4" />
                
                <!-- White background inside hexagon -->
                <polygon points="100,40 152,70 152,130 100,160 48,130 48,70" fill="white" />
                
                <!-- Outer node white outlines -->
                <circle cx="100" cy="40" r="13.5" fill="white" stroke="white" stroke-width="3" />
                <circle cx="152" cy="70" r="13.5" fill="white" stroke="white" stroke-width="3" />
                <circle cx="152" cy="130" r="13.5" fill="white" stroke="white" stroke-width="3" />
                <circle cx="100" cy="160" r="13.5" fill="white" stroke="white" stroke-width="3" />
                <circle cx="48" cy="130" r="13.5" fill="white" stroke="white" stroke-width="3" />
                <circle cx="48" cy="70" r="13.5" fill="white" stroke="white" stroke-width="3" />
                
                <!-- Lines connecting nodes -->
                <line x1="100" y1="100" x2="100" y2="40" stroke="black" stroke-width="5" />
                <line x1="100" y1="100" x2="100" y2="160" stroke="black" stroke-width="5" />
                <line x1="100" y1="100" x2="152" y2="70" stroke="black" stroke-width="5" />
                <line x1="100" y1="100" x2="152" y2="130" stroke="black" stroke-width="5" />
                <line x1="100" y1="100" x2="48" y2="70" stroke="black" stroke-width="5" />
                <line x1="100" y1="100" x2="48" y2="130" stroke="black" stroke-width="5" />
                
                <!-- Outer hexagon connections -->
                <line x1="100" y1="40" x2="152" y2="70" stroke="black" stroke-width="5" />
                <line x1="152" y1="70" x2="152" y2="130" stroke="black" stroke-width="5" />
                <line x1="152" y1="130" x2="100" y2="160" stroke="black" stroke-width="5" />
                <line x1="100" y1="160" x2="48" y2="130" stroke="black" stroke-width="5" />
                <line x1="48" cy="130" x2="48" y2="70" stroke="black" stroke-width="5" />
                <line x1="48" y1="70" x2="100" y2="40" stroke="black" stroke-width="5" />
                
                <!-- Outer nodes (black) -->
                <circle cx="100" cy="40" r="12" fill="black" />
                <circle cx="152" cy="70" r="12" fill="black" />
                <circle cx="152" cy="130" r="12" fill="black" />
                <circle cx="100" cy="160" r="12" fill="black" />
                <circle cx="48" cy="130" r="12" fill="black" />
                <circle cx="48" cy="70" r="12" fill="black" />
                
                <!-- Center node (red) -->
                <circle cx="100" cy="100" r="14" fill="#FF3333" stroke="black" stroke-width="5" />
              </svg>
            `;const f=document.createElement("span");f.className="rcp-toast-text",f.innerText=e,r.appendChild(s),r.appendChild(f),Object.assign(r.style,{position:"fixed",top:"20px",bottom:"auto !important",left:"50%",right:"auto",transform:"translateX(-50%)",background:"#2D2D2D",color:"#FFFFFF",padding:"10px 16px",borderRadius:"8px",zIndex:"2147483647",boxShadow:"0 4px 12px rgba(0, 0, 0, 0.25)",fontWeight:"500",fontSize:"14px",borderLeft:"4px solid #EF4444",opacity:"0",margin:"0",display:"flex",alignItems:"center",gap:"8px",transition:"opacity 200ms ease-out, transform 200ms ease-out",textAlign:"center"}),Object.assign(s.style,{fontSize:"16px",display:"flex",alignItems:"center",justifyContent:"center",width:"20px",height:"20px",marginRight:"4px"}),r.setAttribute("style",r.getAttribute("style")+"position: fixed !important; top: 20px !important; bottom: auto !important;left: 50% !important; transform: translateX(-50%) !important;z-index: 2147483647 !important; background: #2D2D2D !important; color: #FFFFFF !important;display: flex !important; align-items: center !important; text-align: center !important;"),document.body.appendChild(r),r.offsetWidth,r.style.opacity="1",r.style.transform="translateX(-50%)";const h=setTimeout(()=>{r.style.opacity="0",r.style.transform="translateX(-50%) translateY(-10px)",r.setAttribute("style",r.getAttribute("style")+"opacity: 0 !important; transform: translateX(-50%) translateY(-10px) !important;"),setTimeout(()=>{if(r.parentNode)try{document.body.removeChild(r)}catch(b){console.error("Error removing toast after timeout:",b)}},250)},2e3),I=setTimeout(()=>{if(clearTimeout(h),r.parentNode)try{document.body.removeChild(r)}catch(b){console.error("Error in backup toast removal:",b)}},2500);return window.addEventListener("beforeunload",()=>{clearTimeout(h),clearTimeout(I),n()},{once:!0}),r},args:[o]})}catch(e){console.log("Toast script execution failed, using badge fallback:",e),chrome.action.setBadgeText({text:"✓"}),chrome.action.setBadgeBackgroundColor({color:"#EF4444"}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},2e3)}else chrome.action.setBadgeText({text:"✓"}),chrome.action.setBadgeBackgroundColor({color:"#EF4444"}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},2e3)}catch(t){console.error("Error showing toast:",t);try{chrome.action.setBadgeText({text:"✓"}),chrome.action.setBadgeBackgroundColor({color:"#EF4444"}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},2e3)}catch(a){console.error("Even badge fallback failed:",a)}}}async function S(o){try{if(navigator.clipboard&&navigator.clipboard.writeText)try{return await navigator.clipboard.writeText(o),!0}catch(a){console.log("Direct clipboard API failed, trying fallback methods",a)}const[t]=await chrome.tabs.query({active:!0,currentWindow:!0});if(t!=null&&t.url&&(t.url.startsWith("chrome://")||t.url.startsWith("chrome-extension://")||t.url.startsWith("devtools://")||t.url.startsWith("edge://")||t.url.startsWith("about:")))try{if(navigator.clipboard)return await navigator.clipboard.writeText(o),!0}catch(a){return console.error("Unable to copy in restricted URL context:",a),!1}if(t!=null&&t.id&&await chrome.permissions.contains({permissions:["scripting","activeTab"]}))try{const e=await chrome.scripting.executeScript({target:{tabId:t.id??-1},func:i=>{try{if(navigator.clipboard&&navigator.clipboard.writeText)return navigator.clipboard.writeText(i),!0;const n=document.createElement("textarea");n.value=i,n.style.position="fixed",n.style.opacity="0",document.body.appendChild(n),n.select();const r=document.execCommand("copy");return document.body.removeChild(n),r}catch(n){return console.error("In-page clipboard operation failed:",n),!1}},args:[o]});return e&&e[0]&&e[0].result===!0}catch(e){console.error("Script execution for clipboard failed:",e)}return!1}catch(t){return console.error("Error copying to clipboard:",t),!1}}async function C(){await chrome.contextMenus.removeAll(),chrome.contextMenus.create({id:m.parent,title:"Right Click Prompt",contexts:["all"]});const o=await x.getFolders(),t=o.filter(e=>!e.isImported),a=o.filter(e=>e.isImported);t.length>0&&(chrome.contextMenus.create({id:"regular_prompts_header",parentId:m.parent,title:"My Prompts",type:"normal",enabled:!1,contexts:["all"]}),t.forEach(e=>{chrome.contextMenus.create({id:m.folder(e.id),parentId:m.parent,title:e.name,contexts:["all"]}),e.prompts.forEach(i=>{chrome.contextMenus.create({id:m.prompt(i.id),parentId:m.folder(e.id),title:i.title,contexts:["all"]})})})),a.length>0&&(chrome.contextMenus.create({id:"separator",type:"separator",parentId:m.parent,contexts:["all"]}),chrome.contextMenus.create({id:"imported_prompts_header",parentId:m.parent,title:"Imported Prompts",type:"normal",enabled:!1,contexts:["all"]}),a.forEach(e=>{chrome.contextMenus.create({id:m.folder(e.id),parentId:m.parent,title:e.name,contexts:["all"]}),e.prompts.forEach(i=>{chrome.contextMenus.create({id:m.prompt(i.id),parentId:m.folder(e.id),title:i.title,contexts:["all"]})})}))}chrome.runtime.onInstalled.addListener(async o=>{var t;if(await C(),o.reason==="install"&&!(await chrome.storage.local.get(["hasSeenRightClickTip"])).hasSeenRightClickTip){chrome.action.setBadgeText({text:"TIP"}),chrome.action.setBadgeBackgroundColor({color:"#4f46e5"});try{if(await chrome.permissions.contains({permissions:["scripting","activeTab"]})){const i=await chrome.tabs.query({active:!0,currentWindow:!0});if(i&&i.length>0&&((t=i[0])!=null&&t.id)){const n=i[0].id,r=i[0].url||"";if(!r.startsWith("chrome://")&&!r.startsWith("chrome-extension://")&&!r.startsWith("devtools://")&&!r.startsWith("edge://")&&!r.startsWith("about:"))try{await chrome.scripting.executeScript({target:{tabId:n},func:()=>{const s=document.createElement("div");s.style.position="fixed",s.style.bottom="20px",s.style.right="20px",s.style.backgroundColor="#4f46e5",s.style.color="white",s.style.padding="12px 16px",s.style.borderRadius="6px",s.style.zIndex="9999",s.style.fontSize="14px",s.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)",s.style.maxWidth="300px",s.innerHTML="<b>RCP Tip:</b> Right-click anywhere to access your saved prompts!",document.body.appendChild(s),setTimeout(()=>{document.body.contains(s)&&document.body.removeChild(s)},8e3)}})}catch(s){console.error("Error executing script in tab:",s)}}}}catch(e){console.error("Error showing tip:",e)}await chrome.storage.local.set({hasSeenRightClickTip:!0}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},5e3)}});chrome.storage.onChanged.addListener(o=>{o.folders&&C()});chrome.contextMenus.onClicked.addListener(async o=>{if(console.log("Context menu clicked:",o.menuItemId),o.menuItemId==="savePrompt"&&o.selectionText){const t=prompt("Enter a title for this prompt:");if(!(t!=null&&t.trim()))return;const e=(await chrome.storage.local.get("folders")).folders||[];e.length===0&&e.push({id:crypto.randomUUID(),name:"Default",prompts:[]}),e[0].prompts.push({id:crypto.randomUUID(),title:t.trim(),text:o.selectionText,timestamp:new Date().toISOString()}),await x.saveFolders(e),chrome.action.setBadgeText({text:"!"}),chrome.action.setBadgeBackgroundColor({color:"#10B981"}),setTimeout(()=>{chrome.action.setBadgeText({text:""})},2e3)}else if(typeof o.menuItemId=="string"){const t=o.menuItemId.match(/^prompt_(.+)$/);if(t){const a=t[1],e=await x.getFolders();let i=null;for(const n of e){const r=n.prompts.find(s=>s.id===a);if(r){i=r;break}}if(i)try{const r=(await chrome.storage.local.get(["autoPaste"])).autoPaste??!1,s=await S(i.text);if(r)try{if(await chrome.permissions.contains({permissions:["scripting","activeTab"]})){const[d]=await chrome.tabs.query({active:!0,currentWindow:!0});if(d!=null&&d.id){if(d.url&&(d.url.startsWith("chrome://")||d.url.startsWith("chrome-extension://")||d.url.startsWith("devtools://")||d.url.startsWith("edge://")||d.url.startsWith("about:"))){g(T());return}const h=await chrome.scripting.executeScript({target:{tabId:d.id},func:b=>(l=>{const p=document.activeElement;if(p&&(p.isContentEditable||p.tagName==="TEXTAREA"||p.tagName==="INPUT"&&["text","search","url","tel","password"].includes(p.getAttribute("type")||""))){if(p.isContentEditable){const u=window.getComputedStyle(p).whiteSpace;if(u==="pre"||u==="pre-wrap"||u==="pre-line"){if(!document.execCommand("insertText",!1,l)){const y=window.getSelection();if(y&&y.rangeCount>0){const k=y.getRangeAt(0);k.deleteContents();const v=document.createTextNode(l);return k.insertNode(v),k.setStartAfter(v),k.setEndAfter(v),!0}return!1}return!0}else{const w=l.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\n/g,"<br>").replace(/\t/g,"&nbsp;&nbsp;&nbsp;&nbsp;").replace(/ {2}/g,"&nbsp;&nbsp;");return document.execCommand("insertHTML",!1,w)}}else if(p.tagName==="TEXTAREA"||p.tagName==="INPUT"){const c=p,u=c.selectionStart||0,w=c.selectionEnd||0,y=c.value;c.value=y.substring(0,u)+l+y.substring(w),c.selectionStart=c.selectionEnd=u+l.length;const k=new Event("input",{bubbles:!0}),v=new Event("change",{bubbles:!0});return c.dispatchEvent(k),c.dispatchEvent(v),!0}}if(window.monaco&&window.monaco.editor){const c=window.monaco.editor.getEditors();if(c&&c.length>0)return c[0].trigger("keyboard","type",{text:l}),!0}if(window.CodeMirror){let c=null;if(p&&p.CodeMirror)c=p.CodeMirror;else{const u=document.querySelectorAll(".CodeMirror");u.length>0&&(c=u[0].CodeMirror)}if(c){const u=c.getDoc(),w=u.getCursor();return u.replaceRange(l,w),!0}}if(window.ace&&window.ace.edit){const c=window.ace.edit(document.querySelector(".ace_editor"));if(c)return c.insert(l),!0}if(window.tinymce&&window.tinymce.activeEditor)return window.tinymce.activeEditor.insertContent(l),!0;if(window.CKEDITOR)for(const c in window.CKEDITOR.instances)return window.CKEDITOR.instances[c].insertText(l),!0;try{if(document.execCommand("insertText",!1,l))return!0}catch(c){console.error("execCommand insert failed:",c)}return!1})(b),args:[i.text]});h&&h[0]&&h[0].result===!0||g(T())}else g(T())}else g(T())}catch(f){console.error("Error in auto-paste:",f),g(T())}else g(s?T():"Failed to copy to clipboard. Check permissions.")}catch(n){console.error("Error handling prompt selection:",n),g("Something went wrong. Please try again.")}}}});chrome.runtime.onMessage.addListener((o,t,a)=>{if(console.log("Background script received message:",o),o.action==="enableAutoPaste")chrome.storage.local.set({autoPaste:!0}),console.log("Auto-paste enabled"),a({success:!0});else if(o.action==="disableAutoPaste")chrome.storage.local.set({autoPaste:!1}),console.log("Auto-paste disabled"),a({success:!0});else if(o.action==="getTextToPromptEnabled")return chrome.storage.local.get(["textToPromptEnabled"],e=>{const i=e.textToPromptEnabled!==void 0?e.textToPromptEnabled:!0;a({enabled:i})}),!0;return!0});chrome.runtime.onMessage.addListener((o,t,a)=>{if(o.action==="getFolders")return x.getFolders().then(e=>{const i=e.map(n=>({id:n.id,name:n.name}));a({folders:i})}),!0;if(o.action==="getTheme")return chrome.storage.local.get(["theme"],e=>{const i=e.theme||{isDark:!0};a({isDarkMode:i.isDark})}),!0;if(o.action==="createFolder"){const e=o.name;return e?(x.getFolders().then(i=>{const n={id:crypto.randomUUID(),name:e,prompts:[]};i.push(n),x.saveFolders(i).then(()=>{C(),chrome.tabs.query({},r=>{r.forEach(s=>{s.id&&chrome.tabs.sendMessage(s.id,{action:"foldersUpdated"})})}),a({success:!0,folderId:n.id})})}),!0):(a({success:!1,error:"Folder name is required"}),!0)}if(o.action==="savePrompt")return(async()=>{const{title:e,text:i,folderId:n}=o;if(!i||!n){a({success:!1,error:"Text and folder ID are required"});return}try{const r=await x.getFolders(),s=r.findIndex(h=>h.id===n);if(s===-1){a({success:!1,error:"Folder not found"});return}const f={id:crypto.randomUUID(),title:e||"Untitled Prompt",text:i,timestamp:new Date().toISOString()};r[s].prompts.push(f),await x.saveFolders(r);try{await C()}catch(h){console.error("Error rebuilding context menu:",h)}const d=t.tab;d!=null&&d.id&&g("Prompt saved successfully!"),a({success:!0})}catch(r){console.error("Error saving prompt:",r),a({success:!1,error:"Failed to save prompt"})}})(),!0});chrome.storage.onChanged.addListener((o,t)=>{if(t==="local"&&o.theme){const a=o.theme.newValue;chrome.tabs.query({},e=>{e.forEach(i=>{i.id&&chrome.tabs.sendMessage(i.id,{action:"themeChanged",isDarkMode:a.isDark}).catch(()=>{})})})}});
//# sourceMappingURL=background.ts-CCbuNN7g.js.map
